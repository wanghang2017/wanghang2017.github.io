{"version":3,"file":"btcsnap.cjs.development.js","sources":["../src/interface.ts","../src/bitcoin/getNetwork.ts","../src/errors/SnapError.ts","../src/errors/constant/PsbtValidaeErrors.ts","../src/errors/constant/RequestErrors.ts","../src/errors/constant/InvoiceErrors.ts","../src/rpc/validateRequest.ts","../src/bitcoin/xpubConverter.ts","../src/utils/unitHelper.ts","../src/utils/hexHelper.ts","../src/utils/manageState.ts","../src/bitcoin/hdKeyring.ts","../src/bitcoin/simpleKeyring.ts","../src/rpc/getExtendedPublicKey.ts","../src/rpc/getAllXpubs.ts","../src/bitcoin/accountSinger.ts","../src/bitcoin/PsbtHelper.ts","../src/bitcoin/cryptoPath.ts","../src/bitcoin/PsbtValidator.ts","../src/bitcoin/transaction.ts","../src/bitcoin/index.ts","../src/rpc/signPSBT.ts","../src/rpc/getMasterFingerprint.ts","../src/rpc/manageNetwork.ts","../src/utils/getHDNode.ts","../src/rpc/saveLNDataToSnap.ts","../src/rpc/getLNDataFromSnap.ts","../src/utils/transferLNData.ts","../src/rpc/signLNInvoice.ts","../src/rpc/getSimpleAddress.ts","../src/index.ts"],"sourcesContent":["export interface GetPublicExtendedKeyRequest {\n  method: 'btc_getPublicExtendedKey';\n  params: {\n    network: BitcoinNetwork;\n    scriptType: ScriptType;\n  };\n}\n\nexport interface GetAddress {\n  method: 'btc_getAddress';\n  params: {\n    network: BitcoinNetwork;\n    index: number;\n  };\n}\n\nexport interface GetAllXpubsRequest {\n  method: 'btc_getAllXpubs';\n  params: Record<string, never>;\n}\nexport interface SignPsbt {\n  method: 'btc_signPsbt';\n  params: {\n    psbt: string;\n    network: BitcoinNetwork;\n    scriptType: ScriptType;\n    signInputIndex: number;\n    signType: number;\n  };\n}\n\nexport interface GetMasterFingerprint {\n  method: 'btc_getMasterFingerprint';\n}\n\nexport interface ManageNetwork {\n  method: 'btc_network';\n  params: {\n    action: 'get' | 'set';\n    network?: BitcoinNetwork;\n  };\n}\n\nexport interface SaveLNDataToSnap {\n  method: 'btc_saveLNDataToSnap';\n  params: {\n    walletId: string;\n    credential: string;\n    password: string;\n  };\n}\n\nexport interface GetLNDataFromSnap {\n  method: 'btc_getLNDataFromSnap';\n  params: {\n    key: KeyOptions;\n    walletId?: string;\n    type?: 'get' | 'refresh';\n  };\n}\n\nexport interface SignLNInvoice {\n  method: 'btc_signLNInvoice';\n  params: {\n    invoice: string;\n  };\n}\n\nexport type MetamaskBTCRpcRequest =\n  | GetAllXpubsRequest\n  | GetAddress\n  | GetPublicExtendedKeyRequest\n  | SignPsbt\n  | GetMasterFingerprint\n  | ManageNetwork\n  | SaveLNDataToSnap\n  | GetLNDataFromSnap\n  | SignLNInvoice;\n\nexport type BTCMethodCallback = (\n  originString: string,\n  requestObject: MetamaskBTCRpcRequest,\n) => Promise<unknown>;\n\nexport interface Snap {\n  registerRpcMessageHandler: (fn: BTCMethodCallback) => unknown;\n  request<T>(options: {\n    method: string;\n    params?: unknown[] | Record<string, any>;\n  }): Promise<T>;\n}\n\nexport enum ScriptType {\n  P2PKH = 'P2PKH',\n  P2SH_P2WPKH = 'P2SH-P2WPKH',\n  P2WPKH = 'P2WPKH',\n  P2TR = 'P2TR',\n}\n\nexport enum BitcoinNetwork {\n  Main = 'main',\n  Test = 'test',\n}\n\nexport enum KeyOptions {\n  Password = 'password',\n  Credential = 'credential',\n  PubKey = 'pubkey',\n}\n\nconst LightningAccount = Buffer.from('Lightning').readInt32BE();\nexport const LNHdPath = `m/84'/0'/${LightningAccount}'/0/0`;\n\nexport interface PersistedData {\n  network?: BitcoinNetwork;\n  lightning?: {\n    [walletId: string]: {\n      credential: string;\n      password: string;\n    };\n  };\n}\n\nexport interface SLIP10Node {\n  /**\n   * The 0-indexed path depth of this node.\n   */\n  readonly depth: number;\n\n  /**\n   * The fingerprint of the master node, i.e., the node at depth 0. May be\n   * undefined if this node was created from an extended key.\n   */\n  readonly masterFingerprint?: number;\n\n  /**\n   * The fingerprint of the parent key, or 0 if this is a master node.\n   */\n  readonly parentFingerprint: number;\n\n  /**\n   * The index of the node, or 0 if this is a master node.\n   */\n  readonly index: number;\n\n  /**\n   * The private key of this node.\n   */\n  readonly privateKey: string;\n\n  /**\n   * The public key of this node.\n   */\n  readonly publicKey: string;\n\n  /**\n   * The chain code of this node.\n   */\n  readonly chainCode: string;\n\n  /**\n   * The name of the curve used by the node.\n   */\n  readonly curve: 'ed25519' | 'secp256k1';\n}\n","import { Network, networks } from 'bitcoinjs-lib';\nimport { BitcoinNetwork } from '../interface';\n\nexport function getNetwork(network: BitcoinNetwork): Network {\n  switch (network) {\n    case BitcoinNetwork.Main:\n      return networks.bitcoin;\n    case BitcoinNetwork.Test:\n      return networks.testnet;\n    default:\n      throw Error('Network net exist');\n  }\n}\n","export class SnapError extends Error {\n  code: number\n  constructor(code: number) {\n    super();\n    this.code = code;\n  }\n  \n  static of({code, message}: {code: number, message: string}){\n    const snapError = new SnapError(code)\n    snapError.message = message\n    return snapError\n  }\n}\n","export const PsbtValidateErrors = {\n  InputsDataInsufficient: {\n    code: 10001,\n    message: 'Not all inputs have prev Tx raw hex',\n  },\n  InputsNetworkNotMatch: {\n    code: 10002,\n    message: 'Not every input matches network'\n  },\n  OutputsNetworkNotMatch: {\n    code: 10003,\n    message: 'Not every output matches network'\n  },\n  InputNotSpendable: {\n    code: 10004,\n    message: 'Not all inputs belongs to current account'\n  },\n  ChangeAddressInvalid: {\n    code: 10005,\n    message: `Change address doesn't belongs to current account`\n  },\n  FeeTooHigh: {\n    code: 10006,\n    message: 'Too much fee'\n  },\n  AmountNotMatch: {\n    code: 10007,\n    message: 'Transaction input amount not match'\n  }\n}\n","export const RequestErrors = {\n  NoPermission: {\n    code: 20000,\n    message: 'Unauthorized to perform action.'\n  },\n  RejectKey: {\n    code: 20001,\n    message: 'User reject to access the key'\n  },\n  RejectSign: {\n    code: 20002,\n    message: 'User reject the sign request'\n  },\n  SignInvalidPath: {\n    code: 20003,\n    message:'invalid path'\n  },\n  SignFailed: {\n    code: 20004,\n    message: 'Sign transaction failed'\n  },\n  NetworkNotMatch: {\n    code: 20005,\n    message: 'Network not match'\n  },\n  ScriptTypeNotSupport: {\n    code: 20006,\n    message: 'ScriptType is not supported.'\n  },\n  MethodNotSupport: {\n    code: 20007,\n    message: 'Method not found.'\n  },\n  ActionNotSupport: {\n    code: 20008,\n    message: 'Action not supported'\n  },\n  UserReject: {\n    code: 20009,\n    message: 'User rejected the request.'\n  },\n  KeyNotSupported: {\n    code: 20010,\n    message: 'Key cannot be recognized'\n  },\n  DomainNotAllowed: {\n    code: 20011,\n    message: 'Domain not allowed'\n  }\n}\n","export const InvoiceErrors = {\n  AmountNotValid: {\n    code: 30001,\n    message: 'Amount is not valid',\n  },\n};\n","import {BitcoinNetwork, Snap} from '../interface';\nimport {getPersistedData} from '../utils/manageState';\nimport {RpcRequest} from '../index';\nimport { RequestErrors, SnapError } from '../errors';\n\nconst DOMAIN_WHITELIST = [/\\.justsnap\\.io$/];\n\nconst validateNetwork = async (snap: Snap, network: BitcoinNetwork) => {\n  // const snapNetwork = await getPersistedData(snap, 'network', '');\n  // if (snapNetwork && network !== snapNetwork) {\n  //   throw SnapError.of(RequestErrors.NetworkNotMatch);\n  // }\n};\n\nconst validateDomain = async (domain: string) => {\n  const isDomainValid = DOMAIN_WHITELIST.some((pattern) =>\n    pattern.test(domain),\n  );\n  if (!isDomainValid) {\n    throw SnapError.of(RequestErrors.DomainNotAllowed);\n  }\n};\n\nexport const validateRequest = async (\n  snap: Snap,\n  origin: string,\n  request: RpcRequest['request'],\n) => {\n  switch (request.method) {\n    case 'btc_getPublicExtendedKey':\n    case 'btc_signPsbt':\n      await validateNetwork(snap, request.params.network);\n      break;\n    case 'btc_getLNDataFromSnap':\n    case 'btc_saveLNDataToSnap':\n    case 'btc_signLNInvoice':\n      await validateDomain(origin);\n  }\n};\n","import { ScriptType, BitcoinNetwork } from \"../interface\";\nimport { Network, networks } from 'bitcoinjs-lib';\nimport { encode, decode } from \"bs58check\";\n\ntype XpubPrefix = \"xpub\" | \"tpub\" | \"ypub\" | \"upub\" | \"zpub\" | \"vpub\";\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0132.md#registered-hd-version-bytes\nconst xpubPrefixes: Record<XpubPrefix, string> = {\n  'xpub': '0488b21e',\n  'tpub': '043587cf',\n  'ypub': '049d7cb2',\n  'upub': '044a5262',\n  'zpub': '04b24746',\n  'vpub': '045f1cf6',\n}\n\nconst scriptTypeToXpubPrefix: Record<ScriptType, Record<BitcoinNetwork, XpubPrefix>> = {\n  [ScriptType.P2PKH]: {\n    main: 'xpub',\n    test: 'tpub'\n  },\n  [ScriptType.P2SH_P2WPKH]: {\n    main: 'ypub',\n    test: 'upub'\n  },\n  [ScriptType.P2WPKH]: {\n    main: 'zpub',\n    test: 'vpub'\n  },\n  [ScriptType.P2TR]: {\n    main: 'xpub',\n    test: 'tpub'\n  }\n}\n\nexport const convertXpub = (xpub: string, to: ScriptType, network: Network): string => {\n  const net = network === networks.bitcoin ? BitcoinNetwork.Main : BitcoinNetwork.Test;\n  const xpubPrefix = scriptTypeToXpubPrefix[to][net];\n\n  let data = decode(xpub);\n  data = data.slice(4);\n  data = Buffer.concat([Buffer.from(xpubPrefixes[xpubPrefix], \"hex\"), data]);\n  return encode(data);\n}","import BN from 'bn.js';\nimport { SnapError, InvoiceErrors } from '../errors';\n\nconst SATS_PER_BTC = new BN(1e8, 10);\n\ntype BitcoinDivisor  = 'm' | 'u' | 'n' | 'p';\n\nconst DIVISORS: Record<BitcoinDivisor, BN> = {\n  m: new BN(1e3, 10),\n  u: new BN(1e6, 10),\n  n: new BN(1e9, 10),\n  p: new BN(1e12, 10)\n};\n\nexport const hrpToSatoshi = (hrp: string):string => {\n  let divisor, value;\n  if (hrp.slice(-1).match(/^[munp]$/)) {\n    divisor = hrp.slice(-1);\n    value = hrp.slice(0, -1);\n  } else if (hrp.slice(-1).match(/^[^munp0-9]$/)) {\n    throw SnapError.of(InvoiceErrors.AmountNotValid);\n  } else {\n    value = hrp;\n  }\n\n  if (!value.match(/^\\d+$/)){\n    throw SnapError.of(InvoiceErrors.AmountNotValid);\n  }\n\n  const valueBN = new BN(value, 10);\n  const satoshisBN = divisor\n    ? valueBN.mul(SATS_PER_BTC).div(DIVISORS[divisor as BitcoinDivisor])\n    : valueBN.mul(SATS_PER_BTC);\n\n  return satoshisBN.toString();\n};\n","export const trimHexPrefix = (key: string) => key.startsWith('0x') ? key.substring(2) : key;\n","import {PersistedData, Snap} from '../interface';\n\nexport const getPersistedData = async <T>(\n  snap: Snap,\n  key: keyof PersistedData,\n  defaultValue: T,\n): Promise<T> => {\n  const persistedData = await snap.request<PersistedData>({\n    method: 'snap_manageState',\n    params: {\n      operation: 'get'\n    },\n  });\n  if (persistedData && persistedData[key]) {\n    return persistedData[key] as unknown as T;\n  }\n  return defaultValue;\n};\n\nexport const updatePersistedData = async (\n  snap: Snap,\n  key: keyof PersistedData,\n  value: any,\n) => {\n  const persistedData = await snap.request<PersistedData>({\n    method: 'snap_manageState',\n    params: {\n      operation: 'get'\n    },\n  });\n  const updatedData = {\n    ...persistedData,\n    [key]: value,\n  };\n\n  await snap.request({\n    method: 'snap_manageState',\n    params: {\n      operation: 'update',\n      newState: updatedData\n    },\n  });\n};\n","import { BIP32Factory, BIP32Interface } from 'bip32';\nimport { Network, networks } from 'bitcoinjs-lib';\nimport { ScriptType, SLIP10Node, Snap } from '../interface';\nimport ecc from '@bitcoinerlab/secp256k1';\nimport { trimHexPrefix } from '../utils';\n\nconst bip32 = BIP32Factory(ecc);\nexport const pathMap: Record<ScriptType, string[]> = {\n  [ScriptType.P2PKH]: ['m', \"44'\", \"0'\"],\n  [ScriptType.P2SH_P2WPKH]: ['m', \"49'\", \"0'\"],\n  [ScriptType.P2WPKH]: ['m', \"84'\", \"0'\"],\n  [ScriptType.P2TR]: ['m', \"86'\", \"0'\"],\n};\n\nexport const CRYPTO_CURVE = 'secp256k1';\n\nexport const toXOnly = (pubKey: Buffer) =>\n  pubKey.length === 32 ? pubKey : pubKey.slice(1, 33);\n\nexport async function getHDRootNode(\n  snap: Snap,\n  network: Network,\n  scriptType: ScriptType = ScriptType.P2PKH,\n): Promise<{ node: BIP32Interface; mfp: string }> {\n  const path = [...pathMap[scriptType]];\n  if (network != networks.bitcoin) {\n    path[path.length - 1] = \"1'\";\n  }\n\n  const slip10Node = (await snap.request({\n    method: 'snap_getBip32Entropy',\n    params: {\n      path,\n      curve: CRYPTO_CURVE,\n    },\n  })) as SLIP10Node;\n\n  const privateKeyBuffer = Buffer.from(trimHexPrefix(slip10Node.privateKey), 'hex');\n  const chainCodeBuffer = Buffer.from(trimHexPrefix(slip10Node.chainCode), 'hex');\n\n  const node: BIP32Interface = bip32.fromPrivateKey(\n    privateKeyBuffer,\n    chainCodeBuffer,\n    network,\n  );\n  //@ts-ignore\n  // ignore checking since no function to set depth for node\n  node.__DEPTH = slip10Node.depth;\n  //@ts-ignore\n  // ignore checking since no function to set index for node\n  node.__INDEX = slip10Node.index;\n\n  const mfp = slip10Node.masterFingerprint.toString(16).padStart(8, '0');\n\n  return {\n    node: node.deriveHardened(0),\n    mfp,\n  };\n}\n","import { Network, networks, crypto, address, payments } from 'bitcoinjs-lib';\nimport bs58check from 'bs58check';\nimport { ScriptType } from 'interface';\n\nexport function privateKeyToWIF(privateKeyHex: string) {\n  const versionByte = Buffer.from([0x80]); // Mainnet version byte\n  const privateKeyBytes = Buffer.from(privateKeyHex, 'hex');\n  const extendedPrivateKey = Buffer.concat([versionByte, privateKeyBytes]);\n\n  return bs58check.encode(extendedPrivateKey);\n}\n\nexport function getAddress(\n  network: Network,\n  publicKey: string,\n  scriptType?: ScriptType,\n) {\n  const bufferPublicKey = Buffer.from(publicKey, 'hex');\n  const hash = crypto.hash160(bufferPublicKey);\n\n  const addresses: Record<string, string> = {};\n\n  if (network === networks.bitcoin) {\n    addresses['P2PKH'] = address.toBase58Check(hash, 0);\n\n    const result = payments.p2sh({\n      redeem: payments.p2wpkh({ pubkey: bufferPublicKey, network }),\n    });\n    addresses['P2SH-P2WPKH'] = result.address;\n\n    addresses['P2WPKH'] = address.toBech32(hash, 0, 'bc');\n\n    const p2trInstance = payments.p2tr({\n      internalPubkey: bufferPublicKey.slice(1),\n      network,\n    });\n    const tapRootAddress = p2trInstance.address;\n    addresses['P2TR'] = tapRootAddress;\n  } else if (network === networks.testnet) {\n    addresses['P2PKH'] = address.toBase58Check(hash, 111);\n\n    const result = payments.p2sh({\n      redeem: payments.p2wpkh({ pubkey: bufferPublicKey, network }),\n    });\n    addresses['P2SH-P2WPKH'] = result.address;\n\n    addresses['P2WPKH'] = address.toBech32(hash, 0, 'tb');\n\n    const p2trInstance = payments.p2tr({\n      internalPubkey: bufferPublicKey.slice(1),\n      network,\n    });\n    const tapRootAddress = p2trInstance.address;\n    addresses['P2TR'] = tapRootAddress;\n  }\n\n  console.log('addresses...', addresses);\n  if (scriptType) {\n    return addresses[scriptType];\n  }\n\n  return addresses;\n}\n","import { Network, networks } from 'bitcoinjs-lib';\nimport { ScriptType, Snap } from '../interface';\nimport { convertXpub } from '../bitcoin/xpubConverter';\nimport { RequestErrors, SnapError } from '../errors';\nimport { heading, panel, text } from '@metamask/snaps-ui';\nimport { getHDRootNode } from '../bitcoin/hdKeyring';\nimport { getAddress } from '../bitcoin/simpleKeyring';\n\nexport async function getExtendedPublicKey(\n  origin: string,\n  snap: Snap,\n  scriptType: ScriptType,\n  network: Network,\n): Promise<{ xpub: string; mfp: string; address: string }> {\n  const networkName = network == networks.bitcoin ? 'mainnet' : 'testnet';\n  switch (scriptType) {\n    case ScriptType.P2PKH:\n    case ScriptType.P2WPKH:\n    case ScriptType.P2SH_P2WPKH:\n    case ScriptType.P2TR:\n      const result = await snap.request({\n        method: 'snap_dialog',\n        params: {\n          type: 'confirmation',\n          content: panel([\n            heading('Access your extended public key'),\n            text(\n              `Do you want to allow ${origin} to access Bitcoin ${networkName} ${scriptType} extended public key?`,\n            ),\n          ]),\n        },\n      });\n\n      if (result) {\n        const { node: accountNode, mfp } = await getHDRootNode(\n          snap,\n          network,\n          scriptType,\n        );\n\n        const address = getAddress(\n          network,\n          accountNode.publicKey.toString('hex'),\n          scriptType,\n        ) as string;\n\n        const extendedPublicKey = accountNode.neutered();\n        let xpub = extendedPublicKey.toBase58();\n        if (scriptType !== ScriptType.P2TR) {\n          xpub = convertXpub(xpub, scriptType, network);\n        }\n\n        return { mfp, xpub, address };\n      } else {\n        throw SnapError.of(RequestErrors.RejectKey);\n      }\n\n    default:\n      throw SnapError.of(RequestErrors.ScriptTypeNotSupport);\n  }\n}\n","import { panel, text, heading } from '@metamask/snaps-ui';\nimport { networks, address } from 'bitcoinjs-lib';\nimport { BitcoinNetwork, ScriptType, Snap } from '../interface';\nimport { convertXpub } from '../bitcoin/xpubConverter';\nimport { RequestErrors, SnapError } from '../errors';\nimport { getHDRootNode } from '../bitcoin/hdKeyring';\nimport { getAddress } from '../bitcoin/simpleKeyring';\ninterface Account {\n  xpub: string;\n  scriptType: ScriptType;\n  network: BitcoinNetwork;\n  privateKey: string;\n  wif: string;\n  address: string;\n}\n\nexport async function getAllXpubs(origin: string, snap: Snap): Promise<{ xpubs: string[], accounts: {}, mfp: string }> {\n  const result = await snap.request({\n    method: 'snap_dialog',\n    params: {\n      type: 'confirmation',\n      content: panel([\n        heading('Access your extended public key'),\n        text(`${origin} is trying to access your Bitcoin Legacy, SegWit, TapRoot and Native SegWit extended public keys.`),\n      ]),\n    },\n  });\n\n  try {\n    if (result) {\n      let xfp = '';\n      const xpubs: string[] = [];\n      const accounts: Array<Account> = [];\n      await Promise.all(Object.values(BitcoinNetwork).map(async (bitcoinNetwork: BitcoinNetwork) => {\n        const network = bitcoinNetwork === BitcoinNetwork.Main ? networks.bitcoin : networks.testnet;\n        await Promise.all(Object.values(ScriptType).map(async (scriptType: ScriptType) => {\n          const { node: accountNode, mfp } = await getHDRootNode(snap, network, scriptType);\n          xfp = xfp || mfp;\n          const extendedPublicKey = accountNode.neutered();\n          const deriveAccount = accountNode.derive(0).derive(0);\n\n\n          let xpub = extendedPublicKey.toBase58();\n          if (scriptType !== ScriptType.P2TR) {\n            xpub = convertXpub(xpub, scriptType, network);\n          }\n          xpubs.push(xpub);\n          accounts.push({\n            xpub,\n            scriptType,\n            network: bitcoinNetwork,\n            privateKey: deriveAccount.privateKey.toString('hex'),\n            wif: deriveAccount.toWIF(),\n            address: getAddress(network, deriveAccount.publicKey.toString('hex'), scriptType) as string\n          })\n        }));\n      }));\n      console.log('accounts', accounts);\n      return {\n        mfp: xfp,\n        xpubs,\n        accounts,\n      };\n    }\n    throw SnapError.of(RequestErrors.RejectKey);\n  } catch (e) {\n    console.log('error', e)\n    return {\n      mfp: '',\n      xpubs: [],\n      accounts: []\n    }\n  }\n}\n","import ECPairFactory, { ECPairInterface } from 'ecpair';\nimport { BIP32Interface } from 'bip32';\nimport { Signer, HDSigner, crypto } from 'bitcoinjs-lib';\nimport ecc from '@bitcoinerlab/secp256k1';\n\nconst ECPair = ECPairFactory(ecc);\nexport class AccountSigner implements Signer, HDSigner {\n  publicKey: Buffer;\n  fingerprint: Buffer;\n\n  private readonly node: BIP32Interface;\n  private readonly keyPair: ECPairInterface;\n\n  constructor(accountNode: BIP32Interface, mfp?: Buffer) {\n    this.node = accountNode;\n    this.publicKey = this.node.publicKey;\n    this.fingerprint = mfp || this.node.fingerprint;\n\n    this.keyPair = ECPair.fromPrivateKey(this.node.privateKey, {\n      compressed: true,\n    });\n  }\n\n  getTapRootSinger(path = '0/0') {\n    const tapAccountSinger = this.derivePath(path);\n    const tweakedSinger = tapAccountSinger.node.tweak(\n      crypto.taggedHash('TapTweak', tapAccountSinger.node.publicKey.slice(1)),\n    );\n\n    return tweakedSinger;\n  }\n\n  derivePath(path: string): AccountSigner {\n    try {\n      let splitPath = path.split('/');\n      if (splitPath.length > 2) {\n        splitPath = splitPath.slice(-2);\n      }\n      const childNode = splitPath.reduce((prevHd, indexStr) => {\n        let index;\n        if (indexStr.slice(-1) === `'`) {\n          index = parseInt(indexStr.slice(0, -1), 10);\n          return prevHd.deriveHardened(index);\n        } else {\n          index = parseInt(indexStr, 10);\n          const node = prevHd.derive(index);\n          return node;\n        }\n      }, this.node);\n      return new AccountSigner(childNode, this.fingerprint);\n    } catch (e) {\n      throw new Error('invalid path');\n    }\n  }\n\n  sign(hash: Buffer): Buffer {\n    return this.keyPair.sign(hash);\n  }\n\n  signSchnorr(hash: Buffer): Buffer {\n    return this.keyPair.signSchnorr(hash);\n  }\n}\n\nexport const validator = (\n  pubkey: Buffer,\n  msghash: Buffer,\n  signature: Buffer,\n): boolean => {\n  return ECPair.fromPublicKey(pubkey).verify(msghash, signature);\n};\n\nexport const schnorrValidator = (\n  pubkey: Buffer,\n  msghash: Buffer,\n  signature: Buffer,\n): boolean => ecc.verifySchnorr(msghash, pubkey, signature);\n","import { address, Network, Psbt, Transaction } from 'bitcoinjs-lib';\nimport { getNetwork } from './getNetwork';\nimport { BitcoinNetwork } from '../interface';\n\nexport class PsbtHelper {\n  private tx: Psbt;\n  private network: Network;\n\n  constructor(psbt: Psbt, network: BitcoinNetwork) {\n    this.network = getNetwork(network);\n    this.tx = psbt;\n  }\n\n  get inputAmount() {\n    return this.tx.data.inputs.reduce((total, input, index) => {\n      const vout = this.tx.txInputs[index].index;\n      if (input.nonWitnessUtxo){\n        const prevTx = Transaction.fromHex(input.nonWitnessUtxo.toString('hex'));\n        return total + prevTx.outs[vout].value;\n      }else if(input.witnessUtxo){\n        return total + input.witnessUtxo.value;\n      }\n      return total;\n    }, 0);\n  }\n\n  get sendAmount() {\n    return this.tx.txOutputs\n      .filter(output => !this.changeAddresses.includes(output.address))\n      .reduce((amount, output) => amount + output.value, 0);\n  }\n\n  get fee() {\n    const outputAmount = this.tx.txOutputs.reduce((amount, output) => amount + output.value, 0);\n    return this.inputAmount - outputAmount;\n  }\n\n  get fromAddresses() {\n    return this.tx.data.inputs.map((input, index) => {\n      if (input.nonWitnessUtxo){\n        const prevOuts = Transaction.fromHex(input.nonWitnessUtxo.toString('hex')).outs\n        const vout = this.tx.txInputs[index].index;\n        return address.fromOutputScript(prevOuts[vout].script, this.network)\n      }else if(input.witnessUtxo){\n        return address.fromOutputScript(input.witnessUtxo.script, this.network)\n      }\n        return undefined;\n    })\n  }\n\n  get toAddresses() {\n    return this.tx.txOutputs.map(output => output.address).filter(address => !this.changeAddresses.includes(address));\n  }\n\n  get changeAddresses() {\n    return this.tx.data.outputs\n      .map((output, index) => output.bip32Derivation ? this.tx.txOutputs[index].address : undefined)\n      .filter(address => !!address)\n  }\n}\n","export interface HdPath {\n  purpose: string | null;\n  coinType: string | null;\n  account: string | null;\n  change: string | null;\n  index: string | null;\n}\n\nexport interface LightningPath {\n  purpose: {\n    value: string;\n    isHardened: boolean;\n  };\n  coinType: {\n    value: string;\n    isHardened: boolean;\n  };\n  account: {\n    value: string;\n    isHardened: boolean;\n  };\n  change: {\n    value: string;\n    isHardened: boolean;\n  };\n  index: {\n    value: string;\n    isHardened: boolean;\n  };\n}\n\nexport const fromHdPathToObj = (hdPath: string): HdPath => {\n  const regex = /(\\d)+/g;\n  const numbers = hdPath.match(regex);\n  return {\n    purpose: numbers && numbers[0],\n    coinType: numbers && numbers[1],\n    account: numbers && numbers[2],\n    change: numbers && numbers[3],\n    index: numbers && numbers[4],\n  };\n};\n\nexport const parseLightningPath = (hdPath: string): LightningPath => {\n  const regex = /(\\d'?)+/g;\n  const numbers = hdPath.match(regex);\n  const isHardened = (str:string) => {\n    return str.indexOf(\"'\") !== -1\n  }\n\n  return {\n    purpose: {\n      value: numbers && numbers[0],\n      isHardened: isHardened(numbers[0])\n    },\n    coinType: {\n      value: numbers && numbers[1],\n      isHardened: isHardened(numbers[1])\n    },\n    account: {\n      value: numbers && numbers[2],\n      isHardened: isHardened(numbers[2])\n    },\n    change: {\n      value: numbers && numbers[3],\n      isHardened: isHardened(numbers[3])\n    },\n    index: {\n      value: numbers && numbers[4],\n      isHardened: isHardened(numbers[4])\n    },\n  };\n};\n","import { Psbt } from 'bitcoinjs-lib';\nimport { AccountSigner } from './index';\nimport { BitcoinNetwork } from '../interface';\nimport { PsbtHelper } from '../bitcoin/PsbtHelper';\nimport { fromHdPathToObj } from './cryptoPath';\nimport { PsbtValidateErrors, SnapError } from '../errors';\n\nconst BITCOIN_MAINNET_COIN_TYPE = 0;\nconst BITCOIN_TESTNET_COIN_TYPE = 1;\nconst BITCOIN_MAIN_NET_ADDRESS_PATTERN = /^(1|3|bc1)/;\nconst BITCOIN_TEST_NET_ADDRESS_PATTERN = /^(m|n|2|tb1)/;\n\nexport class PsbtValidator {\n  static FEE_THRESHOLD = 10000000;\n  private readonly tx: Psbt;\n  private readonly snapNetwork: BitcoinNetwork;\n  private psbtHelper: PsbtHelper;\n  private error: SnapError | null = null;\n\n  constructor(psbt: Psbt, network: BitcoinNetwork) {\n    this.tx = psbt;\n    this.snapNetwork = network;\n    this.psbtHelper = new PsbtHelper(this.tx, network);\n  }\n\n  get coinType() {\n    return this.snapNetwork === BitcoinNetwork.Main\n      ? BITCOIN_MAINNET_COIN_TYPE\n      : BITCOIN_TESTNET_COIN_TYPE;\n  }\n\n  allInputsHaveRawTxHex() {\n    const result = this.tx.data.inputs.every(\n      (input) => !!input.nonWitnessUtxo || !!input.witnessUtxo,\n    );\n    if (!result) {\n      this.error = SnapError.of(PsbtValidateErrors.InputsDataInsufficient);\n    }\n    return result;\n  }\n\n  everyInputMatchesNetwork() {\n    const result = this.tx.data.inputs.every((input) => {\n      if (input.bip32Derivation) {\n        return input.bip32Derivation.every((derivation) => {\n          const { coinType } = fromHdPathToObj(derivation.path);\n          return Number(coinType) === this.coinType;\n        });\n      }\n      return true;\n    });\n    if (!result) {\n      this.error = SnapError.of(PsbtValidateErrors.InputsNetworkNotMatch);\n    }\n    return result;\n  }\n\n  everyOutputMatchesNetwork() {\n    const addressPattern =\n      this.snapNetwork === BitcoinNetwork.Main\n        ? BITCOIN_MAIN_NET_ADDRESS_PATTERN\n        : BITCOIN_TEST_NET_ADDRESS_PATTERN;\n    const result = this.tx.data.outputs.every((output, index) => {\n      if (output.bip32Derivation) {\n        return output.bip32Derivation.every((derivation) => {\n          const { coinType } = fromHdPathToObj(derivation.path);\n          return Number(coinType) === this.coinType;\n        });\n      } else {\n        const address = this.tx.txOutputs[index].address;\n        return addressPattern.test(address);\n      }\n    });\n\n    if (!result) {\n      this.error = SnapError.of(PsbtValidateErrors.OutputsNetworkNotMatch);\n    }\n    return result;\n  }\n\n  allInputsBelongToCurrentAccount(accountSigner: AccountSigner) {\n    const result = this.tx.txInputs.every((_, index) =>{\n      if (this.tx.data.inputs[index].bip32Derivation) {\n        return this.tx.inputHasHDKey(index, accountSigner);\n      } else {\n        return true;\n        // TODO: P2TR地址校验\n        return this.tx.inputHasPubkey(index, accountSigner.publicKey);\n      }\n    });\n    if (!result) {\n      this.error = SnapError.of(PsbtValidateErrors.InputNotSpendable);\n    }\n    return result;\n  }\n\n  someInputsBelongToCurrentAccount(accountSigner: AccountSigner) {\n    const result = this.tx.txInputs.some((_, index) => {\n      if (this.tx.data.inputs[index].bip32Derivation) {\n        return this.tx.inputHasHDKey(index, accountSigner);\n      } else {\n        return true;\n        // TODO: P2TR地址校验\n        return this.tx.inputHasPubkey(index, accountSigner.publicKey);\n      }\n    });\n    if (!result) {\n      this.error = SnapError.of(PsbtValidateErrors.InputNotSpendable);\n    }\n    return result;\n  }\n\n  changeAddressBelongsToCurrentAccount(accountSigner: AccountSigner) {\n    const result = this.tx.data.outputs.every((output, index) => {\n      if (output.bip32Derivation) {\n        return this.tx.outputHasHDKey(index, accountSigner);\n      }\n      return true;\n    });\n    if (!result) {\n      this.error = SnapError.of(PsbtValidateErrors.ChangeAddressInvalid);\n    }\n    return result;\n  }\n\n  feeUnderThreshold() {\n    const result = this.psbtHelper.fee < PsbtValidator.FEE_THRESHOLD;\n    if (!result) {\n      this.error = SnapError.of(PsbtValidateErrors.FeeTooHigh);\n    }\n    return result;\n  }\n\n  witnessUtxoValueMatchesNoneWitnessOnes() {\n    const hasWitnessUtxo = this.tx.data.inputs.some(\n      (_, index) => this.tx.getInputType(index) === 'witnesspubkeyhash',\n    );\n    if (!hasWitnessUtxo) {\n      return true;\n    }\n\n    const witnessAmount = this.tx.data.inputs.reduce((total, input) => {\n      return total + input.witnessUtxo.value;\n    }, 0);\n    const result = this.psbtHelper.inputAmount === witnessAmount;\n\n    if (!result) {\n      this.error = SnapError.of(PsbtValidateErrors.AmountNotMatch);\n    }\n    return result;\n  }\n\n  validate(accountSigner: AccountSigner) {\n    this.error = null;\n\n    this.allInputsHaveRawTxHex() &&\n      this.everyInputMatchesNetwork() &&\n      this.everyOutputMatchesNetwork() &&\n      this.someInputsBelongToCurrentAccount(accountSigner) &&\n      // this.changeAddressBelongsToCurrentAccount(accountSigner) &&\n      this.feeUnderThreshold() &&\n      this.witnessUtxoValueMatchesNoneWitnessOnes();\n\n    if (this.error) {\n      throw this.error;\n    }\n    return true;\n  }\n}\n","import { Psbt, Transaction as bTransaction, script, Signer } from 'bitcoinjs-lib';\nimport { BitcoinNetwork, ScriptType } from '../interface';\nimport { PsbtValidator } from '../bitcoin/PsbtValidator';\nimport { PsbtHelper } from '../bitcoin/PsbtHelper';\nimport { getNetwork } from './getNetwork';\nimport { AccountSigner, validator, schnorrValidator } from './accountSinger';\n\nexport class Transaction {\n  private tx: Psbt;\n  private network: BitcoinNetwork;\n\n  constructor(base64Psbt: string, network: BitcoinNetwork) {\n    this.tx = Psbt.fromBase64(base64Psbt, { network: getNetwork(network) });\n    this.network = network;\n  }\n\n  validateTx(accountSigner: AccountSigner) {\n    const validator = new PsbtValidator(this.tx, this.network);\n    return validator.validate(accountSigner);\n  }\n\n  extractPsbtJson() {\n    const psbtHelper = new PsbtHelper(this.tx, this.network);\n    const changeAddress = psbtHelper.changeAddresses;\n    const unit = this.network === BitcoinNetwork.Main ? 'sats' : 'tsats';\n\n    const transaction = {\n      from: psbtHelper.fromAddresses.join(','),\n      to: psbtHelper.toAddresses.join(','),\n      value: `${psbtHelper.sendAmount} ${unit}`,\n      fee: `${psbtHelper.fee} ${unit}`,\n      network: `${this.network}net`,\n    };\n\n    if (changeAddress.length > 0) {\n      return { ...transaction, changeAddress: changeAddress.join(',') };\n    }\n    return transaction;\n  }\n\n  extractPsbtJsonString() {\n    return Object.entries(this.extractPsbtJson())\n      .map(([key, value]) => `${key}: ${value}\\n`)\n      .join('');\n  }\n\n  isDefinedSignType(signType: number) {\n    return (\n      signType === bTransaction.SIGHASH_DEFAULT ||\n      script.isDefinedHashType(signType)\n    );\n  }\n\n  signTx(\n    accountSigner: AccountSigner,\n    signInputIndex: number,\n    signType: number,\n    scriptType: ScriptType,\n  ) {\n    let signHashTypes;\n    if (signType && this.isDefinedSignType(signType)) {\n      signHashTypes = [signType];\n    }\n    \n    let signer: Signer;\n    if (scriptType === ScriptType.P2TR) {\n      signer = accountSigner.getTapRootSinger('0/0');\n    }\n\n    try {\n\n      if (signInputIndex && !this.isDefinedSignType(signInputIndex)) {\n        if (scriptType === ScriptType.P2TR) {\n          this.tx.signInput(signInputIndex, signer, signHashTypes);\n        } else {\n          this.tx.signInputHD(signInputIndex, accountSigner, signHashTypes);\n        }\n      } else {\n        if (scriptType === ScriptType.P2TR) {\n          this.tx.signAllInputs(signer, signHashTypes);\n        } else {\n          this.tx.signAllInputsHD(accountSigner, signHashTypes);\n        }\n      }\n\n      const txValidator = scriptType === ScriptType.P2TR?schnorrValidator: validator;\n      if (this.tx.validateSignaturesOfAllInputs(txValidator)) {\n        this.tx.finalizeAllInputs();\n        const txId = this.tx.extractTransaction().getId();\n        const txHex = this.tx.extractTransaction().toHex();\n        // TODO: sendTransaction to memoPool\n        return {\n          finally: true,\n          txId,\n          txHex,\n        };\n      } else {\n        return {\n          finally: false,\n          psbt: this.tx.toBase64(),\n        };\n      }\n    } catch (e) {\n      throw new Error(`Sign transaction failed...${JSON.stringify(e)}`);\n    }\n  }\n}\n","export * from './accountSinger';\nexport * from './simpleKeyring';\nexport * from './transaction';\nexport * from './getNetwork';\nexport * from './hdKeyring';\nexport * from './xpubConverter';\nexport * from './PsbtHelper';\nexport * from './PsbtValidator';\nimport ecc from '@bitcoinerlab/secp256k1';\nimport { initEccLib } from 'bitcoinjs-lib';\n\ninitEccLib(ecc);\n","import { BitcoinNetwork, ScriptType, Snap } from '../interface';\nimport { AccountSigner, Transaction } from '../bitcoin';\nimport { getNetwork } from '../bitcoin/getNetwork';\nimport { SnapError, RequestErrors } from \"../errors\";\nimport { heading, panel, text, divider } from \"@metamask/snaps-ui\";\nimport { getHDRootNode } from '../bitcoin/hdKeyring';\n\ninterface ISignResult{\n  finally: boolean;\n  txId?: string;\n  txHex?: string;\n  psbt?: string;\n}\nexport async function signPsbt(domain: string, snap: Snap, psbt: string, network: BitcoinNetwork, scriptType: ScriptType, signInputIndex: number, signType: number): Promise<ISignResult> {\n  const tx = new Transaction(psbt, network);\n\n\n  \n  const txDetails = tx.extractPsbtJson()\n\n  const result = await snap.request({\n    method: 'snap_dialog',\n    params: {\n      type: 'confirmation',\n      content: panel([\n        heading('Sign Bitcoin Transaction'),\n        text(`Please verify this ongoing Transaction from ${domain}`),\n        divider(),\n        panel(Object.entries(txDetails).map(([key, value]) => text(`**${key}**:\\n ${value}`))),\n      ]),\n    },\n  });\n  \n\n  if (result) {\n    try{\n      const {node, mfp} = await getHDRootNode(snap, getNetwork(network), scriptType)\n      const signer = new AccountSigner(node, Buffer.from(mfp, 'hex'));\n      tx.validateTx(signer)\n\n      return tx.signTx(signer, signInputIndex, signType, scriptType)\n    }catch(e){\n      console.log('sign failed...', e);\n    }\n  \n    return { finally: false, txId: '123', txHex: '123' }\n  } else {\n    throw SnapError.of(RequestErrors.RejectSign);\n  }\n}\n","import { networks } from 'bitcoinjs-lib';\nimport { Snap } from '../interface';\nimport { getHDRootNode } from '../bitcoin/hdKeyring';\n\nexport async function getMasterFingerprint(snap: Snap): Promise<string | void> {\n  const {mfp} = await getHDRootNode(snap, networks.bitcoin);\n\n  return mfp;\n}\n","import { BitcoinNetwork, Snap } from '../interface';\nimport { getPersistedData, updatePersistedData } from '../utils/manageState';\nimport { RequestErrors, SnapError } from \"../errors\";\nimport { heading, panel, text } from \"@metamask/snaps-ui\";\n\nexport async function manageNetwork(origin: string, snap: Snap, action: 'get' | 'set', target?: BitcoinNetwork): Promise<string | void> {\n  switch (action) {\n    case 'get':\n      return getPersistedData<BitcoinNetwork | \"\">(snap, \"network\", \"\");\n    case 'set':\n      const result = await snap.request({\n        method: 'snap_dialog',\n        params: {\n          type: 'confirmation',\n          content: panel([\n            heading('Switch your network'),\n            text(`Do you want to allow ${origin} to switch Bitcoin network to ${target}?`),\n          ]),\n        },\n      });\n      if (result) {\n        await updatePersistedData(snap, \"network\", target)\n        return target;\n      } else {\n        return \"\";\n      }\n    default:\n      throw SnapError.of(RequestErrors.ActionNotSupport);\n  }\n}\n","import * as bip32 from 'bip32';\nimport {BIP32Interface} from 'bip32';\nimport {BitcoinNetwork, SLIP10Node, Snap} from '../interface';\nimport {getNetwork} from '../bitcoin/getNetwork';\nimport {parseLightningPath} from '../bitcoin/cryptoPath';\nimport { trimHexPrefix } from '../utils/hexHelper';\n\nconst CRYPTO_CURVE = 'secp256k1';\n\nexport const getHDNode = async (snap: Snap, hdPath: string) => {\n  const {purpose, coinType, account, change, index} =\n    parseLightningPath(hdPath);\n  const network =\n    coinType.value === '0'\n      ? getNetwork(BitcoinNetwork.Main)\n      : getNetwork(BitcoinNetwork.Test);\n  const path = ['m', purpose.value, coinType.value];\n\n  const slip10Node = (await snap.request({\n    method: 'snap_getBip32Entropy',\n    params: {\n      path: path,\n      curve: CRYPTO_CURVE,\n    },\n  })) as SLIP10Node;\n\n  const privateKeyBuffer = Buffer.from(trimHexPrefix(slip10Node.privateKey), 'hex');\n  const chainCodeBuffer = Buffer.from(trimHexPrefix(slip10Node.chainCode), 'hex');\n  // const node: BIP32Interface = bip32.fromPrivateKey(\n  //   privateKeyBuffer,\n  //   chainCodeBuffer,\n  //   network,\n  // );\n  const node = {} as BIP32Interface;\n\n  //@ts-ignore\n  // ignore checking since no function to set depth for node\n  node.__DEPTH = slip10Node.depth;\n  //@ts-ignore\n  // ignore checking since no function to set index for node\n  node.__INDEX = slip10Node.index;\n  // const pk = node.deriveHardened(1281976168).derive(0).derive(0).publicKey;\n  const deriveLNPath = () => {\n    let nodeLN = node;\n    [account, change, index].forEach((item) => {\n      if (item.isHardened) {\n        nodeLN = nodeLN.deriveHardened(parseInt(item.value));\n      }\n      if (!item.isHardened) {\n        nodeLN = nodeLN.derive(parseInt(item.value));\n      }\n    });\n    return nodeLN;\n  };\n\n  return deriveLNPath();\n};\n","import {Snap, LNHdPath} from '../interface';\nimport {getHDNode} from '../utils/getHDNode';\nimport {getPersistedData, updatePersistedData} from '../utils/manageState';\nimport CryptoJs from 'crypto-js';\n\nexport async function saveLNDataToSnap(\n  domain: string,\n  snap: Snap,\n  walletId: string,\n  credential: string,\n  password: string,\n) {\n  const privateKey = (await getHDNode(snap, LNHdPath)).privateKey.toString(\n    'hex',\n  );\n  const salt = CryptoJs.lib.WordArray.random(16);\n  const key = CryptoJs.PBKDF2(privateKey, salt, {\n    keySize: 16,\n    iterations: 1000,\n  });\n\n  const iv = CryptoJs.lib.WordArray.random(16);\n  const encrypted = CryptoJs.AES.encrypt(credential, key, {iv: iv});\n  const encryptText = salt.toString() + iv.toString() + encrypted.toString();\n  const result = await getPersistedData(snap, 'lightning', {});\n  const newLightning = {\n    ...result,\n    [walletId]: {\n      credential: encryptText,\n      password: password,\n    },\n  };\n\n  await updatePersistedData(snap, 'lightning', newLightning);\n}\n","import {getHDNode} from '../utils/getHDNode';\nimport {Snap, PersistedData, KeyOptions, LNHdPath} from '../interface';\nimport {getPersistedData} from '../utils/manageState';\nimport CryptoJs from 'crypto-js';\nimport { RequestErrors, SnapError } from \"../errors\";\nimport { heading, panel, text } from \"@metamask/snaps-ui\";\n\ninterface GetLNDataFromSnap {\n  key: KeyOptions,\n  walletId?: string,\n  type?: 'get' | 'refresh',\n}\n\nexport async function getLNDataFromSnap(\n  domain: string,\n  snap: Snap,\n  {\n    key,\n    walletId,\n    type = 'get',\n  }: GetLNDataFromSnap\n): Promise<string> {\n  switch (key) {\n    case KeyOptions.PubKey:\n      return (await getHDNode(snap, LNHdPath)).publicKey.toString('hex');\n    case KeyOptions.Password:\n      const lightning = await getPersistedData<PersistedData['lightning']>(\n        snap,\n        'lightning',\n        {},\n      );\n      return lightning[walletId].password;\n    case KeyOptions.Credential:\n      const param = {\n        get: {\n          prompt: 'Access your Lighting wallet credentials',\n          description: `Do you want to allow ${domain} to access your Lighting wallet credentials?`,\n        },\n        refresh: {\n          prompt: 'Lightning Wallet Data has Expired.',\n          description: 'For security purposes, Lightning Wallet data expires after 7 days and needs to be re-authorized.',\n        }\n      }[type]\n      const result = await snap.request({\n        method: 'snap_dialog',\n        params: {\n          type: 'confirmation',\n          content: panel([\n            heading(param.prompt),\n            text(param.description),\n          ]),\n        },\n      });\n      if (result) {\n        const lightning = await getPersistedData<PersistedData['lightning']>(\n          snap,\n          'lightning',\n          {},\n        );\n        const encryptText = lightning[walletId].credential;\n        const salt = CryptoJs.enc.Hex.parse(encryptText.substring(0, 32));\n        const iv = CryptoJs.enc.Hex.parse(encryptText.substring(32, 64));\n        const encrypted = encryptText.substring(64);\n        const privateKey = (\n          await getHDNode(snap, LNHdPath)\n        ).privateKey.toString('hex');\n        const key = CryptoJs.PBKDF2(privateKey, salt, {\n          keySize: 512 / 32,\n          iterations: 1000,\n        });\n        const credential = CryptoJs.AES.decrypt(encrypted, key, {iv: iv});\n\n        return credential.toString(CryptoJs.enc.Utf8);\n      } else {\n        throw SnapError.of(RequestErrors.UserReject);\n      }\n    default:\n      throw SnapError.of(RequestErrors.KeyNotSupported);\n  }\n}\n","import { hrpToSatoshi } from './unitHelper';\n\nexport const formatTime = (sec: number) => {\n  const hours = Math.floor(sec / 3600);\n  const minutes = Math.floor(sec % 3600 / 60);\n  if (hours <= 0 && minutes <= 0) {\n    return 'Expired';\n  }\n  return `${hours}H ${minutes}M`;\n};\n\nconst getBoltField = (invoice: Record<string, any>, key: string) => invoice.find((item:any) => item.name === key);\n\nconst formatInvoice = (invoice:string) => {\n  const decodedInvoice = require('light-bolt11-decoder').decode(invoice).sections;\n  const expireDatetime = getBoltField(decodedInvoice, 'timestamp').value + getBoltField(decodedInvoice, 'expiry').value;\n  return {\n    isMainnet: getBoltField(decodedInvoice, 'coin_network').value.bech32 === 'bc',\n    amount: hrpToSatoshi(getBoltField(decodedInvoice, 'amount').letters),\n    expireTime: expireDatetime - Math.floor(new Date().getTime() / 1000),\n    description: getBoltField(decodedInvoice, 'description').value\n  };\n};\n\nexport const transferInvoiceContent = (invoice: string) => {\n  const formattedInvoice = formatInvoice(invoice);\n  return {\n    network: `Lightning on Bitcoin ${formattedInvoice.isMainnet ? 'mainnet' : 'testnet'}`,\n    type: 'send',\n    amount: formattedInvoice.amount + ' sats',\n    expired_in: formatTime(formattedInvoice.expireTime),\n    description: formattedInvoice.description,\n  };\n};\n","import {Snap, LNHdPath} from '../interface';\nimport {getHDNode} from '../utils/getHDNode';\nimport {transferInvoiceContent} from '../utils/transferLNData';\nimport bitcoinMessage from 'bitcoinjs-message';\nimport { RequestErrors, SnapError } from '../errors';\nimport { divider, heading, panel, text } from \"@metamask/snaps-ui\";\n\nexport async function signLNInvoice(\n  domain: string,\n  snap: Snap,\n  invoice: string,\n): Promise<string> {\n  const invoiceContent = transferInvoiceContent(invoice);\n  const result = await snap.request({\n    method: 'snap_dialog',\n    params: {\n      type: 'confirmation',\n      content: panel([\n        heading('Sign Lightning Transaction'),\n        text(`Please verify this ongoing transaction from ${domain}`),\n        divider(),\n        panel(Object.entries(invoiceContent).map(([key, value]) => text(`**${key}**:\\n ${value}`))),\n      ]),\n    },\n  });\n\n  if (result) {\n    const privateKey = (await getHDNode(snap, LNHdPath)).privateKey;\n    const signature = bitcoinMessage\n      .sign(invoice, privateKey, true)\n      .toString('hex');\n    return signature;\n  } else {\n    throw SnapError.of(RequestErrors.RejectSign);\n  }\n}\n","import {\n  Network,\n  networks,\n} from 'bitcoinjs-lib';\nimport { ScriptType, Snap } from '../interface';\nimport { RequestErrors, SnapError } from '../errors';\nimport { heading, panel, text } from '@metamask/snaps-ui';\nimport { getHDRootNode } from '../bitcoin/hdKeyring';\nimport { getAddress, privateKeyToWIF } from '../bitcoin/simpleKeyring';\n\nexport async function getSimpleAddress(\n  origin: string,\n  snap: Snap,\n  network: Network,\n): Promise<Record<string, string> | string> {\n  const networkName = network == networks.bitcoin ? 'mainnet' : 'testnet';\n\n  const result = await snap.request({\n    method: 'snap_dialog',\n    params: {\n      type: 'confirmation',\n      content: panel([\n        heading('Access your account addresses'),\n        text(\n          `Do you want to allow ${origin} to access Bitcoin ${networkName} addresses?`,\n        ),\n      ]),\n    },\n  });\n\n  if (result) {\n    const { node } = await getHDRootNode(snap, network, ScriptType.P2PKH);\n\n    const publicKey = node.publicKey.toString('hex');\n    console.log('node public key...', publicKey, node.privateKey.toString('hex'));\n    console.log('wif privateKey...', privateKeyToWIF(node.privateKey.toString('hex')));\n\n    return getAddress(network, publicKey);\n  } else {\n    throw SnapError.of(RequestErrors.RejectKey);\n  }\n}\n","import {getNetwork} from './bitcoin/getNetwork';\nimport {Snap, MetamaskBTCRpcRequest} from './interface';\nimport {\n  getExtendedPublicKey,\n  getSimpleAddress,\n  getAllXpubs,\n  signPsbt,\n  getMasterFingerprint,\n  manageNetwork,\n  validateRequest,\n  saveLNDataToSnap,\n  getLNDataFromSnap,\n  signLNInvoice,\n} from './rpc';\nimport {SnapError, RequestErrors} from './errors';\n\n// @ts-ignore\nglobalThis.Buffer = require('buffer/').Buffer;\n\ndeclare let snap: Snap;\n\nexport type RpcRequest = {\n  origin: string;\n  request: MetamaskBTCRpcRequest;\n};\n\nexport const onRpcRequest:any = async ({origin, request}: RpcRequest) => {\n  await validateRequest(snap, origin, request);\n\n  switch (request.method) {\n    case 'btc_getPublicExtendedKey':\n      return getExtendedPublicKey(\n        origin,\n        snap,\n        request.params.scriptType,\n        getNetwork(request.params.network),\n      );\n    case 'btc_getAddress':\n      return getSimpleAddress(\n        origin,\n        snap,\n        getNetwork(request.params.network),\n      );\n    case 'btc_getAllXpubs':\n      return getAllXpubs(origin, snap);\n    case 'btc_signPsbt':\n      const psbt = request.params.psbt;\n      return signPsbt(\n        origin,\n        snap,\n        psbt,\n        request.params.network,\n        request.params.scriptType,\n        request.params.signInputIndex,\n        request.params.signType\n      );\n    case 'btc_getMasterFingerprint':\n      return getMasterFingerprint(snap);\n    case 'btc_network':\n      return manageNetwork(\n        origin,\n        snap,\n        request.params.action,\n        request.params.network,\n      );\n    case 'btc_saveLNDataToSnap':\n      return saveLNDataToSnap(\n        origin,\n        snap,\n        request.params.walletId,\n        request.params.credential,\n        request.params.password,\n      );\n    case 'btc_getLNDataFromSnap':\n      return getLNDataFromSnap(origin, snap, {\n        key: request.params.key,\n        ...(request.params.walletId && {walletId: request.params.walletId}),\n        ...(request.params.type && {type: request.params.type}),\n      });\n    case 'btc_signLNInvoice':\n      return signLNInvoice(origin, snap, request.params.invoice);\n    default:\n      throw SnapError.of(RequestErrors.MethodNotSupport);\n  }\n};\n"],"names":["ScriptType","BitcoinNetwork","KeyOptions","LightningAccount","Buffer","from","readInt32BE","LNHdPath","getNetwork","network","Main","networks","bitcoin","Test","testnet","Error","SnapError","constructor","code","of","message","snapError","PsbtValidateErrors","InputsDataInsufficient","InputsNetworkNotMatch","OutputsNetworkNotMatch","InputNotSpendable","ChangeAddressInvalid","FeeTooHigh","AmountNotMatch","RequestErrors","NoPermission","RejectKey","RejectSign","SignInvalidPath","SignFailed","NetworkNotMatch","ScriptTypeNotSupport","MethodNotSupport","ActionNotSupport","UserReject","KeyNotSupported","DomainNotAllowed","InvoiceErrors","AmountNotValid","DOMAIN_WHITELIST","validateNetwork","snap","validateDomain","domain","isDomainValid","some","pattern","test","validateRequest","origin","request","method","xpubPrefixes","scriptTypeToXpubPrefix","P2PKH","main","P2SH_P2WPKH","P2WPKH","P2TR","convertXpub","xpub","to","net","xpubPrefix","data","decode","slice","concat","encode","SATS_PER_BTC","BN","DIVISORS","m","u","n","p","hrpToSatoshi","hrp","divisor","value","match","valueBN","satoshisBN","mul","div","toString","trimHexPrefix","key","startsWith","substring","getPersistedData","defaultValue","persistedData","params","operation","updatePersistedData","updatedData","newState","bip32","BIP32Factory","ecc","pathMap","CRYPTO_CURVE","getHDRootNode","scriptType","path","length","slip10Node","curve","privateKeyBuffer","privateKey","chainCodeBuffer","chainCode","node","fromPrivateKey","__DEPTH","depth","__INDEX","index","mfp","masterFingerprint","padStart","deriveHardened","privateKeyToWIF","privateKeyHex","versionByte","privateKeyBytes","extendedPrivateKey","bs58check","getAddress","publicKey","bufferPublicKey","hash","crypto","hash160","addresses","address","toBase58Check","result","payments","p2sh","redeem","p2wpkh","pubkey","toBech32","p2trInstance","p2tr","internalPubkey","tapRootAddress","console","log","getExtendedPublicKey","networkName","type","content","panel","heading","text","accountNode","extendedPublicKey","neutered","toBase58","getAllXpubs","xfp","xpubs","accounts","Promise","all","Object","values","map","bitcoinNetwork","deriveAccount","derive","push","wif","toWIF","e","ECPair","ECPairFactory","AccountSigner","fingerprint","keyPair","compressed","getTapRootSinger","tapAccountSinger","derivePath","tweakedSinger","tweak","taggedHash","splitPath","split","childNode","reduce","prevHd","indexStr","parseInt","sign","signSchnorr","validator","msghash","signature","fromPublicKey","verify","schnorrValidator","verifySchnorr","PsbtHelper","psbt","tx","inputAmount","inputs","total","input","vout","txInputs","nonWitnessUtxo","prevTx","Transaction","fromHex","outs","witnessUtxo","sendAmount","txOutputs","filter","output","changeAddresses","includes","amount","fee","outputAmount","fromAddresses","prevOuts","fromOutputScript","script","undefined","toAddresses","outputs","bip32Derivation","fromHdPathToObj","hdPath","regex","numbers","purpose","coinType","account","change","parseLightningPath","isHardened","str","indexOf","BITCOIN_MAINNET_COIN_TYPE","BITCOIN_TESTNET_COIN_TYPE","BITCOIN_MAIN_NET_ADDRESS_PATTERN","BITCOIN_TEST_NET_ADDRESS_PATTERN","PsbtValidator","snapNetwork","psbtHelper","allInputsHaveRawTxHex","every","error","everyInputMatchesNetwork","derivation","Number","everyOutputMatchesNetwork","addressPattern","allInputsBelongToCurrentAccount","accountSigner","_","inputHasHDKey","someInputsBelongToCurrentAccount","changeAddressBelongsToCurrentAccount","outputHasHDKey","feeUnderThreshold","FEE_THRESHOLD","witnessUtxoValueMatchesNoneWitnessOnes","hasWitnessUtxo","getInputType","witnessAmount","validate","base64Psbt","Psbt","fromBase64","validateTx","extractPsbtJson","changeAddress","unit","transaction","join","extractPsbtJsonString","entries","isDefinedSignType","signType","bTransaction","SIGHASH_DEFAULT","isDefinedHashType","signTx","signInputIndex","signHashTypes","signer","signInput","signInputHD","signAllInputs","signAllInputsHD","txValidator","validateSignaturesOfAllInputs","finalizeAllInputs","txId","extractTransaction","getId","txHex","toHex","finally","toBase64","JSON","stringify","initEccLib","signPsbt","txDetails","divider","getMasterFingerprint","manageNetwork","action","target","getHDNode","deriveLNPath","nodeLN","forEach","item","saveLNDataToSnap","walletId","credential","password","salt","CryptoJs","lib","WordArray","random","PBKDF2","keySize","iterations","iv","encrypted","AES","encrypt","encryptText","newLightning","getLNDataFromSnap","PubKey","Password","lightning","Credential","param","get","prompt","description","refresh","enc","Hex","parse","decrypt","Utf8","formatTime","sec","hours","Math","floor","minutes","getBoltField","invoice","find","name","formatInvoice","decodedInvoice","require","sections","expireDatetime","isMainnet","bech32","letters","expireTime","Date","getTime","transferInvoiceContent","formattedInvoice","expired_in","signLNInvoice","invoiceContent","bitcoinMessage","getSimpleAddress","globalThis","onRpcRequest"],"mappings":";;;;;;;;;;;;;;;;;AA4FA,IAAYA,UAKX;AALD,WAAYA,UAAU;EACpBA,6BAAe;EACfA,yCAA2B;EAC3BA,+BAAiB;EACjBA,2BAAa;AACf,CAAC,EALWA,UAAU,KAAVA,UAAU;AAOtB,IAAYC,cAGX;AAHD,WAAYA,cAAc;EACxBA,+BAAa;EACbA,+BAAa;AACf,CAAC,EAHWA,cAAc,KAAdA,cAAc;AAK1B,IAAYC,UAIX;AAJD,WAAYA,UAAU;EACpBA,mCAAqB;EACrBA,uCAAyB;EACzBA,+BAAiB;AACnB,CAAC,EAJWA,UAAU,KAAVA,UAAU;AAMtB,MAAMC,gBAAgB,gBAAGC,MAAM,CAACC,IAAI,CAAC,WAAW,CAAC,CAACC,WAAW,EAAE;AACxD,MAAMC,QAAQ,eAAeJ,uBAAuB;;SC5G3CK,UAAUA,CAACC,OAAuB;EAChD,QAAQA,OAAO;IACb,KAAKR,cAAc,CAACS,IAAI;MACtB,OAAOC,qBAAQ,CAACC,OAAO;IACzB,KAAKX,cAAc,CAACY,IAAI;MACtB,OAAOF,qBAAQ,CAACG,OAAO;IACzB;MACE,MAAMC,KAAK,CAAC,mBAAmB,CAAC;;AAEtC;;MCZaC,SAAU,SAAQD,KAAK;EAElCE,YAAYC,IAAY;IACtB,KAAK,EAAE;IACP,IAAI,CAACA,IAAI,GAAGA,IAAI;;EAGlB,OAAOC,EAAEA,CAAC;IAACD,IAAI;IAAEE;GAAyC;IACxD,MAAMC,SAAS,GAAG,IAAIL,SAAS,CAACE,IAAI,CAAC;IACrCG,SAAS,CAACD,OAAO,GAAGA,OAAO;IAC3B,OAAOC,SAAS;;;;ACVb,MAAMC,kBAAkB,GAAG;EAChCC,sBAAsB,EAAE;IACtBL,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDI,qBAAqB,EAAE;IACrBN,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDK,sBAAsB,EAAE;IACtBP,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDM,iBAAiB,EAAE;IACjBR,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDO,oBAAoB,EAAE;IACpBT,IAAI,EAAE,KAAK;IACXE,OAAO;GACR;EACDQ,UAAU,EAAE;IACVV,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDS,cAAc,EAAE;IACdX,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;;CAEZ;;AC7BM,MAAMU,aAAa,GAAG;EAC3BC,YAAY,EAAE;IACZb,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDY,SAAS,EAAE;IACTd,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDa,UAAU,EAAE;IACVf,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDc,eAAe,EAAE;IACfhB,IAAI,EAAE,KAAK;IACXE,OAAO,EAAC;GACT;EACDe,UAAU,EAAE;IACVjB,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDgB,eAAe,EAAE;IACflB,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDiB,oBAAoB,EAAE;IACpBnB,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDkB,gBAAgB,EAAE;IAChBpB,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDmB,gBAAgB,EAAE;IAChBrB,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDoB,UAAU,EAAE;IACVtB,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDqB,eAAe,EAAE;IACfvB,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;GACV;EACDsB,gBAAgB,EAAE;IAChBxB,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;;CAEZ;;ACjDM,MAAMuB,aAAa,GAAG;EAC3BC,cAAc,EAAE;IACd1B,IAAI,EAAE,KAAK;IACXE,OAAO,EAAE;;CAEZ;;ACAD,MAAMyB,gBAAgB,GAAG,CAAC,iBAAiB,CAAC;AAE5C,MAAMC,eAAe,GAAG,OAAOC,IAAU,EAAEtC,OAAuB;;;;;AAIhE,CACD;AAED,MAAMuC,cAAc,GAAG,MAAOC,MAAc;EAC1C,MAAMC,aAAa,GAAGL,gBAAgB,CAACM,IAAI,CAAEC,OAAO,IAClDA,OAAO,CAACC,IAAI,CAACJ,MAAM,CAAC,CACrB;EACD,IAAI,CAACC,aAAa,EAAE;IAClB,MAAMlC,SAAS,CAACG,EAAE,CAACW,aAAa,CAACY,gBAAgB,CAAC;;AAEtD,CAAC;AAED,AAAO,MAAMY,eAAe,GAAG,OAC7BP,IAAU,EACVQ,MAAc,EACdC,OAA8B;EAE9B,QAAQA,OAAO,CAACC,MAAM;IACpB,KAAK,0BAA0B;IAC/B,KAAK,cAAc;MACjB,MAAMX,eAAe,CAACC,AAA4B,CAAC;MACnD;IACF,KAAK,uBAAuB;IAC5B,KAAK,sBAAsB;IAC3B,KAAK,mBAAmB;MACtB,MAAMC,cAAc,CAACO,MAAM,CAAC;;AAElC,CAAC;;AChCD;AACA,MAAMG,YAAY,GAA+B;EAC/C,MAAM,EAAE,UAAU;EAClB,MAAM,EAAE,UAAU;EAClB,MAAM,EAAE,UAAU;EAClB,MAAM,EAAE,UAAU;EAClB,MAAM,EAAE,UAAU;EAClB,MAAM,EAAE;CACT;AAED,MAAMC,sBAAsB,GAA2D;EACrF,CAAC3D,UAAU,CAAC4D,KAAK,GAAG;IAClBC,IAAI,EAAE,MAAM;IACZR,IAAI,EAAE;GACP;EACD,CAACrD,UAAU,CAAC8D,WAAW,GAAG;IACxBD,IAAI,EAAE,MAAM;IACZR,IAAI,EAAE;GACP;EACD,CAACrD,UAAU,CAAC+D,MAAM,GAAG;IACnBF,IAAI,EAAE,MAAM;IACZR,IAAI,EAAE;GACP;EACD,CAACrD,UAAU,CAACgE,IAAI,GAAG;IACjBH,IAAI,EAAE,MAAM;IACZR,IAAI,EAAE;;CAET;AAED,AAAO,MAAMY,WAAW,GAAGA,CAACC,IAAY,EAAEC,EAAc,EAAE1D,OAAgB;EACxE,MAAM2D,GAAG,GAAG3D,OAAO,KAAKE,qBAAQ,CAACC,OAAO,GAAGX,cAAc,CAACS,IAAI,GAAGT,cAAc,CAACY,IAAI;EACpF,MAAMwD,UAAU,GAAGV,sBAAsB,CAACQ,EAAE,CAAC,CAACC,GAAG,CAAC;EAElD,IAAIE,IAAI,GAAGC,gBAAM,CAACL,IAAI,CAAC;EACvBI,IAAI,GAAGA,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;EACpBF,IAAI,GAAGlE,MAAM,CAACqE,MAAM,CAAC,CAACrE,MAAM,CAACC,IAAI,CAACqD,YAAY,CAACW,UAAU,CAAC,EAAE,KAAK,CAAC,EAAEC,IAAI,CAAC,CAAC;EAC1E,OAAOI,gBAAM,CAACJ,IAAI,CAAC;AACrB,CAAC;;ACxCD,MAAMK,YAAY,gBAAG,IAAIC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC;AAIpC,MAAMC,QAAQ,GAA+B;EAC3CC,CAAC,eAAE,IAAIF,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC;EAClBG,CAAC,eAAE,IAAIH,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC;EAClBI,CAAC,eAAE,IAAIJ,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC;EAClBK,CAAC,eAAE,IAAIL,EAAE,CAAC,IAAI,EAAE,EAAE;CACnB;AAED,AAAO,MAAMM,YAAY,GAAIC,GAAW;EACtC,IAAIC,OAAO,EAAEC,KAAK;EAClB,IAAIF,GAAG,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC,CAACc,KAAK,CAAC,UAAU,CAAC,EAAE;IACnCF,OAAO,GAAGD,GAAG,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;IACvBa,KAAK,GAAGF,GAAG,CAACX,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;GACzB,MAAM,IAAIW,GAAG,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC,CAACc,KAAK,CAAC,cAAc,CAAC,EAAE;IAC9C,MAAMtE,SAAS,CAACG,EAAE,CAACwB,aAAa,CAACC,cAAc,CAAC;GACjD,MAAM;IACLyC,KAAK,GAAGF,GAAG;;EAGb,IAAI,CAACE,KAAK,CAACC,KAAK,CAAC,OAAO,CAAC,EAAC;IACxB,MAAMtE,SAAS,CAACG,EAAE,CAACwB,aAAa,CAACC,cAAc,CAAC;;EAGlD,MAAM2C,OAAO,GAAG,IAAIX,EAAE,CAACS,KAAK,EAAE,EAAE,CAAC;EACjC,MAAMG,UAAU,GAAGJ,OAAO,GACtBG,OAAO,CAACE,GAAG,CAACd,YAAY,CAAC,CAACe,GAAG,CAACb,QAAQ,CAACO,OAAyB,CAAC,CAAC,GAClEG,OAAO,CAACE,GAAG,CAACd,YAAY,CAAC;EAE7B,OAAOa,UAAU,CAACG,QAAQ,EAAE;AAC9B,CAAC;;ACnCM,MAAMC,aAAa,GAAIC,GAAW,IAAKA,GAAG,CAACC,UAAU,CAAC,IAAI,CAAC,GAAGD,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC,GAAGF,GAAG;;ACEpF,MAAMG,gBAAgB,GAAG,OAC9BjD,IAAU,EACV8C,GAAwB,EACxBI,YAAe;EAEf,MAAMC,aAAa,GAAG,MAAMnD,IAAI,CAACS,OAAO,CAAgB;IACtDC,MAAM,EAAE,kBAAkB;IAC1B0C,MAAM,EAAE;MACNC,SAAS,EAAE;;GAEd,CAAC;EACF,IAAIF,aAAa,IAAIA,aAAa,CAACL,GAAG,CAAC,EAAE;IACvC,OAAOK,aAAa,CAACL,GAAG,CAAiB;;EAE3C,OAAOI,YAAY;AACrB,CAAC;AAED,AAAO,MAAMI,mBAAmB,GAAG,OACjCtD,IAAU,EACV8C,GAAwB,EACxBR,KAAU;EAEV,MAAMa,aAAa,GAAG,MAAMnD,IAAI,CAACS,OAAO,CAAgB;IACtDC,MAAM,EAAE,kBAAkB;IAC1B0C,MAAM,EAAE;MACNC,SAAS,EAAE;;GAEd,CAAC;EACF,MAAME,WAAW,GAAG;IAClB,GAAGJ,aAAa;IAChB,CAACL,GAAG,GAAGR;GACR;EAED,MAAMtC,IAAI,CAACS,OAAO,CAAC;IACjBC,MAAM,EAAE,kBAAkB;IAC1B0C,MAAM,EAAE;MACNC,SAAS,EAAE,QAAQ;MACnBG,QAAQ,EAAED;;GAEb,CAAC;AACJ,CAAC;;ACpCD,MAAME,KAAK,gBAAGC,oBAAY,CAACC,GAAG,CAAC;AAC/B,AAAO,MAAMC,OAAO,GAAiC;EACnD,CAAC3G,UAAU,CAAC4D,KAAK,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC;EACtC,CAAC5D,UAAU,CAAC8D,WAAW,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC;EAC5C,CAAC9D,UAAU,CAAC+D,MAAM,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC;EACvC,CAAC/D,UAAU,CAACgE,IAAI,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI;CACrC;AAED,AAAO,MAAM4C,YAAY,GAAG,WAAW;AAEvC,AAGO,eAAeC,aAAaA,CACjC9D,IAAU,EACVtC,OAAgB,EAChBqG,aAAyB9G,UAAU,CAAC4D,KAAK;EAEzC,MAAMmD,IAAI,GAAG,CAAC,GAAGJ,OAAO,CAACG,UAAU,CAAC,CAAC;EACrC,IAAIrG,OAAO,IAAIE,qBAAQ,CAACC,OAAO,EAAE;IAC/BmG,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;;EAG9B,MAAMC,UAAU,GAAI,MAAMlE,IAAI,CAACS,OAAO,CAAC;IACrCC,MAAM,EAAE,sBAAsB;IAC9B0C,MAAM,EAAE;MACNY,IAAI;MACJG,KAAK,EAAEN;;GAEV,CAAgB;EAEjB,MAAMO,gBAAgB,GAAG/G,MAAM,CAACC,IAAI,CAACuF,aAAa,CAACqB,UAAU,CAACG,UAAU,CAAC,EAAE,KAAK,CAAC;EACjF,MAAMC,eAAe,GAAGjH,MAAM,CAACC,IAAI,CAACuF,aAAa,CAACqB,UAAU,CAACK,SAAS,CAAC,EAAE,KAAK,CAAC;EAE/E,MAAMC,IAAI,GAAmBf,KAAK,CAACgB,cAAc,CAC/CL,gBAAgB,EAChBE,eAAe,EACf5G,OAAO,CACR;;;EAGD8G,IAAI,CAACE,OAAO,GAAGR,UAAU,CAACS,KAAK;;;EAG/BH,IAAI,CAACI,OAAO,GAAGV,UAAU,CAACW,KAAK;EAE/B,MAAMC,GAAG,GAAGZ,UAAU,CAACa,iBAAiB,CAACnC,QAAQ,CAAC,EAAE,CAAC,CAACoC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEtE,OAAO;IACLR,IAAI,EAAEA,IAAI,CAACS,cAAc,CAAC,CAAC,CAAC;IAC5BH;GACD;AACH;;SCtDgBI,eAAeA,CAACC,aAAqB;EACnD,MAAMC,WAAW,GAAG/H,MAAM,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAM+H,eAAe,GAAGhI,MAAM,CAACC,IAAI,CAAC6H,aAAa,EAAE,KAAK,CAAC;EACzD,MAAMG,kBAAkB,GAAGjI,MAAM,CAACqE,MAAM,CAAC,CAAC0D,WAAW,EAAEC,eAAe,CAAC,CAAC;EAExE,OAAOE,kBAAS,CAAC5D,MAAM,CAAC2D,kBAAkB,CAAC;AAC7C;AAEA,SAAgBE,UAAUA,CACxB9H,OAAgB,EAChB+H,SAAiB,EACjB1B,UAAuB;EAEvB,MAAM2B,eAAe,GAAGrI,MAAM,CAACC,IAAI,CAACmI,SAAS,EAAE,KAAK,CAAC;EACrD,MAAME,IAAI,GAAGC,mBAAM,CAACC,OAAO,CAACH,eAAe,CAAC;EAE5C,MAAMI,SAAS,GAA2B,EAAE;EAE5C,IAAIpI,OAAO,KAAKE,qBAAQ,CAACC,OAAO,EAAE;IAChCiI,SAAS,CAAC,OAAO,CAAC,GAAGC,oBAAO,CAACC,aAAa,CAACL,IAAI,EAAE,CAAC,CAAC;IAEnD,MAAMM,MAAM,GAAGC,qBAAQ,CAACC,IAAI,CAAC;MAC3BC,MAAM,EAAEF,qBAAQ,CAACG,MAAM,CAAC;QAAEC,MAAM,EAAEZ,eAAe;QAAEhI;OAAS;KAC7D,CAAC;IACFoI,SAAS,CAAC,aAAa,CAAC,GAAGG,MAAM,CAACF,OAAO;IAEzCD,SAAS,CAAC,QAAQ,CAAC,GAAGC,oBAAO,CAACQ,QAAQ,CAACZ,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC;IAErD,MAAMa,YAAY,GAAGN,qBAAQ,CAACO,IAAI,CAAC;MACjCC,cAAc,EAAEhB,eAAe,CAACjE,KAAK,CAAC,CAAC,CAAC;MACxC/D;KACD,CAAC;IACF,MAAMiJ,cAAc,GAAGH,YAAY,CAACT,OAAO;IAC3CD,SAAS,CAAC,MAAM,CAAC,GAAGa,cAAc;GACnC,MAAM,IAAIjJ,OAAO,KAAKE,qBAAQ,CAACG,OAAO,EAAE;IACvC+H,SAAS,CAAC,OAAO,CAAC,GAAGC,oBAAO,CAACC,aAAa,CAACL,IAAI,EAAE,GAAG,CAAC;IAErD,MAAMM,MAAM,GAAGC,qBAAQ,CAACC,IAAI,CAAC;MAC3BC,MAAM,EAAEF,qBAAQ,CAACG,MAAM,CAAC;QAAEC,MAAM,EAAEZ,eAAe;QAAEhI;OAAS;KAC7D,CAAC;IACFoI,SAAS,CAAC,aAAa,CAAC,GAAGG,MAAM,CAACF,OAAO;IAEzCD,SAAS,CAAC,QAAQ,CAAC,GAAGC,oBAAO,CAACQ,QAAQ,CAACZ,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC;IAErD,MAAMa,YAAY,GAAGN,qBAAQ,CAACO,IAAI,CAAC;MACjCC,cAAc,EAAEhB,eAAe,CAACjE,KAAK,CAAC,CAAC,CAAC;MACxC/D;KACD,CAAC;IACF,MAAMiJ,cAAc,GAAGH,YAAY,CAACT,OAAO;IAC3CD,SAAS,CAAC,MAAM,CAAC,GAAGa,cAAc;;EAGpCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEf,SAAS,CAAC;EACtC,IAAI/B,UAAU,EAAE;IACd,OAAO+B,SAAS,CAAC/B,UAAU,CAAC;;EAG9B,OAAO+B,SAAS;AAClB;;ACtDO,eAAegB,oBAAoBA,CACxCtG,MAAc,EACdR,IAAU,EACV+D,UAAsB,EACtBrG,OAAgB;EAEhB,MAAMqJ,WAAW,GAAGrJ,OAAO,IAAIE,qBAAQ,CAACC,OAAO,GAAG,SAAS,GAAG,SAAS;EACvE,QAAQkG,UAAU;IAChB,KAAK9G,UAAU,CAAC4D,KAAK;IACrB,KAAK5D,UAAU,CAAC+D,MAAM;IACtB,KAAK/D,UAAU,CAAC8D,WAAW;IAC3B,KAAK9D,UAAU,CAACgE,IAAI;MAClB,MAAMgF,MAAM,GAAG,MAAMjG,IAAI,CAACS,OAAO,CAAC;QAChCC,MAAM,EAAE,aAAa;QACrB0C,MAAM,EAAE;UACN4D,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAEC,aAAK,CAAC,CACbC,eAAO,CAAC,iCAAiC,CAAC,EAC1CC,YAAI,yBACsB5G,4BAA4BuG,eAAehD,iCAAiC,CACrG,CACF;;OAEJ,CAAC;MAEF,IAAIkC,MAAM,EAAE;QACV,MAAM;UAAEzB,IAAI,EAAE6C,WAAW;UAAEvC;SAAK,GAAG,MAAMhB,aAAa,CACpD9D,IAAI,EACJtC,OAAO,EACPqG,UAAU,CACX;QAED,MAAMgC,OAAO,GAAGP,UAAU,CACxB9H,OAAO,EACP2J,WAAW,CAAC5B,SAAS,CAAC7C,QAAQ,CAAC,KAAK,CAAC,EACrCmB,UAAU,CACD;QAEX,MAAMuD,iBAAiB,GAAGD,WAAW,CAACE,QAAQ,EAAE;QAChD,IAAIpG,IAAI,GAAGmG,iBAAiB,CAACE,QAAQ,EAAE;QACvC,IAAIzD,UAAU,KAAK9G,UAAU,CAACgE,IAAI,EAAE;UAClCE,IAAI,GAAGD,WAAW,CAACC,IAAI,EAAE4C,UAAU,EAAErG,OAAO,CAAC;;QAG/C,OAAO;UAAEoH,GAAG;UAAE3D,IAAI;UAAE4E;SAAS;OAC9B,MAAM;QACL,MAAM9H,SAAS,CAACG,EAAE,CAACW,aAAa,CAACE,SAAS,CAAC;;IAG/C;MACE,MAAMhB,SAAS,CAACG,EAAE,CAACW,aAAa,CAACO,oBAAoB,CAAC;;AAE5D;;AC5CO,eAAemI,WAAWA,CAACjH,MAAc,EAAER,IAAU;EAC1D,MAAMiG,MAAM,GAAG,MAAMjG,IAAI,CAACS,OAAO,CAAC;IAChCC,MAAM,EAAE,aAAa;IACrB0C,MAAM,EAAE;MACN4D,IAAI,EAAE,cAAc;MACpBC,OAAO,EAAEC,aAAK,CAAC,CACbC,eAAO,CAAC,iCAAiC,CAAC,EAC1CC,YAAI,IAAI5G,yGAAyG,CAAC,CACnH;;GAEJ,CAAC;EAEF,IAAI;IACF,IAAIyF,MAAM,EAAE;MACV,IAAIyB,GAAG,GAAG,EAAE;MACZ,MAAMC,KAAK,GAAa,EAAE;MAC1B,MAAMC,QAAQ,GAAmB,EAAE;MACnC,MAAMC,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,MAAM,CAAC9K,cAAc,CAAC,CAAC+K,GAAG,CAAC,MAAOC,cAA8B;QACvF,MAAMxK,OAAO,GAAGwK,cAAc,KAAKhL,cAAc,CAACS,IAAI,GAAGC,qBAAQ,CAACC,OAAO,GAAGD,qBAAQ,CAACG,OAAO;QAC5F,MAAM8J,OAAO,CAACC,GAAG,CAACC,MAAM,CAACC,MAAM,CAAC/K,UAAU,CAAC,CAACgL,GAAG,CAAC,MAAOlE,UAAsB;UAC3E,MAAM;YAAES,IAAI,EAAE6C,WAAW;YAAEvC;WAAK,GAAG,MAAMhB,aAAa,CAAC9D,IAAI,EAAEtC,OAAO,EAAEqG,UAAU,CAAC;UACjF2D,GAAG,GAAGA,GAAG,IAAI5C,GAAG;UAChB,MAAMwC,iBAAiB,GAAGD,WAAW,CAACE,QAAQ,EAAE;UAChD,MAAMY,aAAa,GAAGd,WAAW,CAACe,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAAC,CAAC,CAAC;UAGrD,IAAIjH,IAAI,GAAGmG,iBAAiB,CAACE,QAAQ,EAAE;UACvC,IAAIzD,UAAU,KAAK9G,UAAU,CAACgE,IAAI,EAAE;YAClCE,IAAI,GAAGD,WAAW,CAACC,IAAI,EAAE4C,UAAU,EAAErG,OAAO,CAAC;;UAE/CiK,KAAK,CAACU,IAAI,CAAClH,IAAI,CAAC;UAChByG,QAAQ,CAACS,IAAI,CAAC;YACZlH,IAAI;YACJ4C,UAAU;YACVrG,OAAO,EAAEwK,cAAc;YACvB7D,UAAU,EAAE8D,aAAa,CAAC9D,UAAU,CAACzB,QAAQ,CAAC,KAAK,CAAC;YACpD0F,GAAG,EAAEH,aAAa,CAACI,KAAK,EAAE;YAC1BxC,OAAO,EAAEP,UAAU,CAAC9H,OAAO,EAAEyK,aAAa,CAAC1C,SAAS,CAAC7C,QAAQ,CAAC,KAAK,CAAC,EAAEmB,UAAU;WACjF,CAAC;SACH,CAAC,CAAC;OACJ,CAAC,CAAC;MACH6C,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEe,QAAQ,CAAC;MACjC,OAAO;QACL9C,GAAG,EAAE4C,GAAG;QACRC,KAAK;QACLC;OACD;;IAEH,MAAM3J,SAAS,CAACG,EAAE,CAACW,aAAa,CAACE,SAAS,CAAC;GAC5C,CAAC,OAAOuJ,CAAC,EAAE;IACV5B,OAAO,CAACC,GAAG,CAAC,OAAO,EAAE2B,CAAC,CAAC;IACvB,OAAO;MACL1D,GAAG,EAAE,EAAE;MACP6C,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;KACX;;AAEL;;ACpEA,MAAMa,MAAM,gBAAGC,aAAa,CAAC/E,GAAG,CAAC;AACjC,MAAagF,aAAa;EAOxBzK,YAAYmJ,WAA2B,EAAEvC,GAAY;IACnD,IAAI,CAACN,IAAI,GAAG6C,WAAW;IACvB,IAAI,CAAC5B,SAAS,GAAG,IAAI,CAACjB,IAAI,CAACiB,SAAS;IACpC,IAAI,CAACmD,WAAW,GAAG9D,GAAG,IAAI,IAAI,CAACN,IAAI,CAACoE,WAAW;IAE/C,IAAI,CAACC,OAAO,GAAGJ,MAAM,CAAChE,cAAc,CAAC,IAAI,CAACD,IAAI,CAACH,UAAU,EAAE;MACzDyE,UAAU,EAAE;KACb,CAAC;;EAGJC,gBAAgBA,CAAC/E,IAAI,GAAG,KAAK;IAC3B,MAAMgF,gBAAgB,GAAG,IAAI,CAACC,UAAU,CAACjF,IAAI,CAAC;IAC9C,MAAMkF,aAAa,GAAGF,gBAAgB,CAACxE,IAAI,CAAC2E,KAAK,CAC/CvD,mBAAM,CAACwD,UAAU,CAAC,UAAU,EAAEJ,gBAAgB,CAACxE,IAAI,CAACiB,SAAS,CAAChE,KAAK,CAAC,CAAC,CAAC,CAAC,CACxE;IAED,OAAOyH,aAAa;;EAGtBD,UAAUA,CAACjF,IAAY;IACrB,IAAI;MACF,IAAIqF,SAAS,GAAGrF,IAAI,CAACsF,KAAK,CAAC,GAAG,CAAC;MAC/B,IAAID,SAAS,CAACpF,MAAM,GAAG,CAAC,EAAE;QACxBoF,SAAS,GAAGA,SAAS,CAAC5H,KAAK,CAAC,CAAC,CAAC,CAAC;;MAEjC,MAAM8H,SAAS,GAAGF,SAAS,CAACG,MAAM,CAAC,CAACC,MAAM,EAAEC,QAAQ;QAClD,IAAI7E,KAAK;QACT,IAAI6E,QAAQ,CAACjI,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;UAC9BoD,KAAK,GAAG8E,QAAQ,CAACD,QAAQ,CAACjI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UAC3C,OAAOgI,MAAM,CAACxE,cAAc,CAACJ,KAAK,CAAC;SACpC,MAAM;UACLA,KAAK,GAAG8E,QAAQ,CAACD,QAAQ,EAAE,EAAE,CAAC;UAC9B,MAAMlF,IAAI,GAAGiF,MAAM,CAACrB,MAAM,CAACvD,KAAK,CAAC;UACjC,OAAOL,IAAI;;OAEd,EAAE,IAAI,CAACA,IAAI,CAAC;MACb,OAAO,IAAImE,aAAa,CAACY,SAAS,EAAE,IAAI,CAACX,WAAW,CAAC;KACtD,CAAC,OAAOJ,CAAC,EAAE;MACV,MAAM,IAAIxK,KAAK,CAAC,cAAc,CAAC;;;EAInC4L,IAAIA,CAACjE,IAAY;IACf,OAAO,IAAI,CAACkD,OAAO,CAACe,IAAI,CAACjE,IAAI,CAAC;;EAGhCkE,WAAWA,CAAClE,IAAY;IACtB,OAAO,IAAI,CAACkD,OAAO,CAACgB,WAAW,CAAClE,IAAI,CAAC;;;AAIzC,AAAO,MAAMmE,SAAS,GAAGA,CACvBxD,MAAc,EACdyD,OAAe,EACfC,SAAiB;EAEjB,OAAOvB,MAAM,CAACwB,aAAa,CAAC3D,MAAM,CAAC,CAAC4D,MAAM,CAACH,OAAO,EAAEC,SAAS,CAAC;AAChE,CAAC;AAED,AAAO,MAAMG,gBAAgB,GAAGA,CAC9B7D,MAAc,EACdyD,OAAe,EACfC,SAAiB,KACLrG,GAAG,CAACyG,aAAa,CAACL,OAAO,EAAEzD,MAAM,EAAE0D,SAAS,CAAC;;MCxE9CK,UAAU;EAIrBnM,YAAYoM,IAAU,EAAE5M,OAAuB;IAC7C,IAAI,CAACA,OAAO,GAAGD,UAAU,CAACC,OAAO,CAAC;IAClC,IAAI,CAAC6M,EAAE,GAAGD,IAAI;;EAGhB,IAAIE,WAAWA;IACb,OAAO,IAAI,CAACD,EAAE,CAAChJ,IAAI,CAACkJ,MAAM,CAACjB,MAAM,CAAC,CAACkB,KAAK,EAAEC,KAAK,EAAE9F,KAAK;MACpD,MAAM+F,IAAI,GAAG,IAAI,CAACL,EAAE,CAACM,QAAQ,CAAChG,KAAK,CAAC,CAACA,KAAK;MAC1C,IAAI8F,KAAK,CAACG,cAAc,EAAC;QACvB,MAAMC,MAAM,GAAGC,wBAAW,CAACC,OAAO,CAACN,KAAK,CAACG,cAAc,CAAClI,QAAQ,CAAC,KAAK,CAAC,CAAC;QACxE,OAAO8H,KAAK,GAAGK,MAAM,CAACG,IAAI,CAACN,IAAI,CAAC,CAACtI,KAAK;OACvC,MAAK,IAAGqI,KAAK,CAACQ,WAAW,EAAC;QACzB,OAAOT,KAAK,GAAGC,KAAK,CAACQ,WAAW,CAAC7I,KAAK;;MAExC,OAAOoI,KAAK;KACb,EAAE,CAAC,CAAC;;EAGP,IAAIU,UAAUA;IACZ,OAAO,IAAI,CAACb,EAAE,CAACc,SAAS,CACrBC,MAAM,CAACC,MAAM,IAAI,CAAC,IAAI,CAACC,eAAe,CAACC,QAAQ,CAACF,MAAM,CAACxF,OAAO,CAAC,CAAC,CAChEyD,MAAM,CAAC,CAACkC,MAAM,EAAEH,MAAM,KAAKG,MAAM,GAAGH,MAAM,CAACjJ,KAAK,EAAE,CAAC,CAAC;;EAGzD,IAAIqJ,GAAGA;IACL,MAAMC,YAAY,GAAG,IAAI,CAACrB,EAAE,CAACc,SAAS,CAAC7B,MAAM,CAAC,CAACkC,MAAM,EAAEH,MAAM,KAAKG,MAAM,GAAGH,MAAM,CAACjJ,KAAK,EAAE,CAAC,CAAC;IAC3F,OAAO,IAAI,CAACkI,WAAW,GAAGoB,YAAY;;EAGxC,IAAIC,aAAaA;IACf,OAAO,IAAI,CAACtB,EAAE,CAAChJ,IAAI,CAACkJ,MAAM,CAACxC,GAAG,CAAC,CAAC0C,KAAK,EAAE9F,KAAK;MAC1C,IAAI8F,KAAK,CAACG,cAAc,EAAC;QACvB,MAAMgB,QAAQ,GAAGd,wBAAW,CAACC,OAAO,CAACN,KAAK,CAACG,cAAc,CAAClI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAACsI,IAAI;QAC/E,MAAMN,IAAI,GAAG,IAAI,CAACL,EAAE,CAACM,QAAQ,CAAChG,KAAK,CAAC,CAACA,KAAK;QAC1C,OAAOkB,oBAAO,CAACgG,gBAAgB,CAACD,QAAQ,CAAClB,IAAI,CAAC,CAACoB,MAAM,EAAE,IAAI,CAACtO,OAAO,CAAC;OACrE,MAAK,IAAGiN,KAAK,CAACQ,WAAW,EAAC;QACzB,OAAOpF,oBAAO,CAACgG,gBAAgB,CAACpB,KAAK,CAACQ,WAAW,CAACa,MAAM,EAAE,IAAI,CAACtO,OAAO,CAAC;;MAEvE,OAAOuO,SAAS;KACnB,CAAC;;EAGJ,IAAIC,WAAWA;IACb,OAAO,IAAI,CAAC3B,EAAE,CAACc,SAAS,CAACpD,GAAG,CAACsD,MAAM,IAAIA,MAAM,CAACxF,OAAO,CAAC,CAACuF,MAAM,CAACvF,OAAO,IAAI,CAAC,IAAI,CAACyF,eAAe,CAACC,QAAQ,CAAC1F,OAAO,CAAC,CAAC;;EAGnH,IAAIyF,eAAeA;IACjB,OAAO,IAAI,CAACjB,EAAE,CAAChJ,IAAI,CAAC4K,OAAO,CACxBlE,GAAG,CAAC,CAACsD,MAAM,EAAE1G,KAAK,KAAK0G,MAAM,CAACa,eAAe,GAAG,IAAI,CAAC7B,EAAE,CAACc,SAAS,CAACxG,KAAK,CAAC,CAACkB,OAAO,GAAGkG,SAAS,CAAC,CAC7FX,MAAM,CAACvF,OAAO,IAAI,CAAC,CAACA,OAAO,CAAC;;;;AC1B5B,MAAMsG,eAAe,GAAIC,MAAc;EAC5C,MAAMC,KAAK,GAAG,QAAQ;EACtB,MAAMC,OAAO,GAAGF,MAAM,CAAC/J,KAAK,CAACgK,KAAK,CAAC;EACnC,OAAO;IACLE,OAAO,EAAED,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;IAC9BE,QAAQ,EAAEF,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;IAC/BG,OAAO,EAAEH,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;IAC9BI,MAAM,EAAEJ,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;IAC7B3H,KAAK,EAAE2H,OAAO,IAAIA,OAAO,CAAC,CAAC;GAC5B;AACH,CAAC;AAED,AAAO,MAAMK,kBAAkB,GAAIP,MAAc;EAC/C,MAAMC,KAAK,GAAG,UAAU;EACxB,MAAMC,OAAO,GAAGF,MAAM,CAAC/J,KAAK,CAACgK,KAAK,CAAC;EACnC,MAAMO,UAAU,GAAIC,GAAU;IAC5B,OAAOA,GAAG,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;GAC/B;EAED,OAAO;IACLP,OAAO,EAAE;MACPnK,KAAK,EAAEkK,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;MAC5BM,UAAU,EAAEA,UAAU,CAACN,OAAO,CAAC,CAAC,CAAC;KAClC;IACDE,QAAQ,EAAE;MACRpK,KAAK,EAAEkK,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;MAC5BM,UAAU,EAAEA,UAAU,CAACN,OAAO,CAAC,CAAC,CAAC;KAClC;IACDG,OAAO,EAAE;MACPrK,KAAK,EAAEkK,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;MAC5BM,UAAU,EAAEA,UAAU,CAACN,OAAO,CAAC,CAAC,CAAC;KAClC;IACDI,MAAM,EAAE;MACNtK,KAAK,EAAEkK,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;MAC5BM,UAAU,EAAEA,UAAU,CAACN,OAAO,CAAC,CAAC,CAAC;KAClC;IACD3H,KAAK,EAAE;MACLvC,KAAK,EAAEkK,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC;MAC5BM,UAAU,EAAEA,UAAU,CAACN,OAAO,CAAC,CAAC,CAAC;;GAEpC;AACH,CAAC;;ACjED,MAAMS,yBAAyB,GAAG,CAAC;AACnC,MAAMC,yBAAyB,GAAG,CAAC;AACnC,MAAMC,gCAAgC,GAAG,YAAY;AACrD,MAAMC,gCAAgC,GAAG,cAAc;AAEvD,MAAaC,aAAa;EAOxBnP,YAAYoM,IAAU,EAAE5M,OAAuB;IAFvC,UAAK,GAAqB,IAAI;IAGpC,IAAI,CAAC6M,EAAE,GAAGD,IAAI;IACd,IAAI,CAACgD,WAAW,GAAG5P,OAAO;IAC1B,IAAI,CAAC6P,UAAU,GAAG,IAAIlD,UAAU,CAAC,IAAI,CAACE,EAAE,EAAE7M,OAAO,CAAC;;EAGpD,IAAIgP,QAAQA;IACV,OAAO,IAAI,CAACY,WAAW,KAAKpQ,cAAc,CAACS,IAAI,GAC3CsP,yBAAyB,GACzBC,yBAAyB;;EAG/BM,qBAAqBA;IACnB,MAAMvH,MAAM,GAAG,IAAI,CAACsE,EAAE,CAAChJ,IAAI,CAACkJ,MAAM,CAACgD,KAAK,CACrC9C,KAAK,IAAK,CAAC,CAACA,KAAK,CAACG,cAAc,IAAI,CAAC,CAACH,KAAK,CAACQ,WAAW,CACzD;IACD,IAAI,CAAClF,MAAM,EAAE;MACX,IAAI,CAACyH,KAAK,GAAGzP,SAAS,CAACG,EAAE,CAACG,kBAAkB,CAACC,sBAAsB,CAAC;;IAEtE,OAAOyH,MAAM;;EAGf0H,wBAAwBA;IACtB,MAAM1H,MAAM,GAAG,IAAI,CAACsE,EAAE,CAAChJ,IAAI,CAACkJ,MAAM,CAACgD,KAAK,CAAE9C,KAAK;MAC7C,IAAIA,KAAK,CAACyB,eAAe,EAAE;QACzB,OAAOzB,KAAK,CAACyB,eAAe,CAACqB,KAAK,CAAEG,UAAU;UAC5C,MAAM;YAAElB;WAAU,GAAGL,eAAe,CAACuB,UAAU,CAAC5J,IAAI,CAAC;UACrD,OAAO6J,MAAM,CAACnB,QAAQ,CAAC,KAAK,IAAI,CAACA,QAAQ;SAC1C,CAAC;;MAEJ,OAAO,IAAI;KACZ,CAAC;IACF,IAAI,CAACzG,MAAM,EAAE;MACX,IAAI,CAACyH,KAAK,GAAGzP,SAAS,CAACG,EAAE,CAACG,kBAAkB,CAACE,qBAAqB,CAAC;;IAErE,OAAOwH,MAAM;;EAGf6H,yBAAyBA;IACvB,MAAMC,cAAc,GAClB,IAAI,CAACT,WAAW,KAAKpQ,cAAc,CAACS,IAAI,GACpCwP,gCAAgC,GAChCC,gCAAgC;IACtC,MAAMnH,MAAM,GAAG,IAAI,CAACsE,EAAE,CAAChJ,IAAI,CAAC4K,OAAO,CAACsB,KAAK,CAAC,CAAClC,MAAM,EAAE1G,KAAK;MACtD,IAAI0G,MAAM,CAACa,eAAe,EAAE;QAC1B,OAAOb,MAAM,CAACa,eAAe,CAACqB,KAAK,CAAEG,UAAU;UAC7C,MAAM;YAAElB;WAAU,GAAGL,eAAe,CAACuB,UAAU,CAAC5J,IAAI,CAAC;UACrD,OAAO6J,MAAM,CAACnB,QAAQ,CAAC,KAAK,IAAI,CAACA,QAAQ;SAC1C,CAAC;OACH,MAAM;QACL,MAAM3G,OAAO,GAAG,IAAI,CAACwE,EAAE,CAACc,SAAS,CAACxG,KAAK,CAAC,CAACkB,OAAO;QAChD,OAAOgI,cAAc,CAACzN,IAAI,CAACyF,OAAO,CAAC;;KAEtC,CAAC;IAEF,IAAI,CAACE,MAAM,EAAE;MACX,IAAI,CAACyH,KAAK,GAAGzP,SAAS,CAACG,EAAE,CAACG,kBAAkB,CAACG,sBAAsB,CAAC;;IAEtE,OAAOuH,MAAM;;EAGf+H,+BAA+BA,CAACC,aAA4B;IAC1D,MAAMhI,MAAM,GAAG,IAAI,CAACsE,EAAE,CAACM,QAAQ,CAAC4C,KAAK,CAAC,CAACS,CAAC,EAAErJ,KAAK;MAC7C,IAAI,IAAI,CAAC0F,EAAE,CAAChJ,IAAI,CAACkJ,MAAM,CAAC5F,KAAK,CAAC,CAACuH,eAAe,EAAE;QAC9C,OAAO,IAAI,CAAC7B,EAAE,CAAC4D,aAAa,CAACtJ,KAAK,EAAEoJ,aAAa,CAAC;OACnD,MAAM;QACL,OAAO,IAAI;;KAId,CAAC;IACF,IAAI,CAAChI,MAAM,EAAE;MACX,IAAI,CAACyH,KAAK,GAAGzP,SAAS,CAACG,EAAE,CAACG,kBAAkB,CAACI,iBAAiB,CAAC;;IAEjE,OAAOsH,MAAM;;EAGfmI,gCAAgCA,CAACH,aAA4B;IAC3D,MAAMhI,MAAM,GAAG,IAAI,CAACsE,EAAE,CAACM,QAAQ,CAACzK,IAAI,CAAC,CAAC8N,CAAC,EAAErJ,KAAK;MAC5C,IAAI,IAAI,CAAC0F,EAAE,CAAChJ,IAAI,CAACkJ,MAAM,CAAC5F,KAAK,CAAC,CAACuH,eAAe,EAAE;QAC9C,OAAO,IAAI,CAAC7B,EAAE,CAAC4D,aAAa,CAACtJ,KAAK,EAAEoJ,aAAa,CAAC;OACnD,MAAM;QACL,OAAO,IAAI;;KAId,CAAC;IACF,IAAI,CAAChI,MAAM,EAAE;MACX,IAAI,CAACyH,KAAK,GAAGzP,SAAS,CAACG,EAAE,CAACG,kBAAkB,CAACI,iBAAiB,CAAC;;IAEjE,OAAOsH,MAAM;;EAGfoI,oCAAoCA,CAACJ,aAA4B;IAC/D,MAAMhI,MAAM,GAAG,IAAI,CAACsE,EAAE,CAAChJ,IAAI,CAAC4K,OAAO,CAACsB,KAAK,CAAC,CAAClC,MAAM,EAAE1G,KAAK;MACtD,IAAI0G,MAAM,CAACa,eAAe,EAAE;QAC1B,OAAO,IAAI,CAAC7B,EAAE,CAAC+D,cAAc,CAACzJ,KAAK,EAAEoJ,aAAa,CAAC;;MAErD,OAAO,IAAI;KACZ,CAAC;IACF,IAAI,CAAChI,MAAM,EAAE;MACX,IAAI,CAACyH,KAAK,GAAGzP,SAAS,CAACG,EAAE,CAACG,kBAAkB,CAACK,oBAAoB,CAAC;;IAEpE,OAAOqH,MAAM;;EAGfsI,iBAAiBA;IACf,MAAMtI,MAAM,GAAG,IAAI,CAACsH,UAAU,CAAC5B,GAAG,GAAG0B,aAAa,CAACmB,aAAa;IAChE,IAAI,CAACvI,MAAM,EAAE;MACX,IAAI,CAACyH,KAAK,GAAGzP,SAAS,CAACG,EAAE,CAACG,kBAAkB,CAACM,UAAU,CAAC;;IAE1D,OAAOoH,MAAM;;EAGfwI,sCAAsCA;IACpC,MAAMC,cAAc,GAAG,IAAI,CAACnE,EAAE,CAAChJ,IAAI,CAACkJ,MAAM,CAACrK,IAAI,CAC7C,CAAC8N,CAAC,EAAErJ,KAAK,KAAK,IAAI,CAAC0F,EAAE,CAACoE,YAAY,CAAC9J,KAAK,CAAC,KAAK,mBAAmB,CAClE;IACD,IAAI,CAAC6J,cAAc,EAAE;MACnB,OAAO,IAAI;;IAGb,MAAME,aAAa,GAAG,IAAI,CAACrE,EAAE,CAAChJ,IAAI,CAACkJ,MAAM,CAACjB,MAAM,CAAC,CAACkB,KAAK,EAAEC,KAAK;MAC5D,OAAOD,KAAK,GAAGC,KAAK,CAACQ,WAAW,CAAC7I,KAAK;KACvC,EAAE,CAAC,CAAC;IACL,MAAM2D,MAAM,GAAG,IAAI,CAACsH,UAAU,CAAC/C,WAAW,KAAKoE,aAAa;IAE5D,IAAI,CAAC3I,MAAM,EAAE;MACX,IAAI,CAACyH,KAAK,GAAGzP,SAAS,CAACG,EAAE,CAACG,kBAAkB,CAACO,cAAc,CAAC;;IAE9D,OAAOmH,MAAM;;EAGf4I,QAAQA,CAACZ,aAA4B;IACnC,IAAI,CAACP,KAAK,GAAG,IAAI;IAEjB,IAAI,CAACF,qBAAqB,EAAE,IAC1B,IAAI,CAACG,wBAAwB,EAAE,IAC/B,IAAI,CAACG,yBAAyB,EAAE,IAChC,IAAI,CAACM,gCAAgC,CAACH,aAAa,CAAC;;IAEpD,IAAI,CAACM,iBAAiB,EAAE,IACxB,IAAI,CAACE,sCAAsC,EAAE;IAE/C,IAAI,IAAI,CAACf,KAAK,EAAE;MACd,MAAM,IAAI,CAACA,KAAK;;IAElB,OAAO,IAAI;;;AAzJNL,2BAAa,GAAG,QAAQ;;MCNpBrC,WAAW;EAItB9M,YAAY4Q,UAAkB,EAAEpR,OAAuB;IACrD,IAAI,CAAC6M,EAAE,GAAGwE,iBAAI,CAACC,UAAU,CAACF,UAAU,EAAE;MAAEpR,OAAO,EAAED,UAAU,CAACC,OAAO;KAAG,CAAC;IACvE,IAAI,CAACA,OAAO,GAAGA,OAAO;;EAGxBuR,UAAUA,CAAChB,aAA4B;IACrC,MAAMnE,SAAS,GAAG,IAAIuD,aAAa,CAAC,IAAI,CAAC9C,EAAE,EAAE,IAAI,CAAC7M,OAAO,CAAC;IAC1D,OAAOoM,SAAS,CAAC+E,QAAQ,CAACZ,aAAa,CAAC;;EAG1CiB,eAAeA;IACb,MAAM3B,UAAU,GAAG,IAAIlD,UAAU,CAAC,IAAI,CAACE,EAAE,EAAE,IAAI,CAAC7M,OAAO,CAAC;IACxD,MAAMyR,aAAa,GAAG5B,UAAU,CAAC/B,eAAe;IAChD,MAAM4D,IAAI,GAAG,IAAI,CAAC1R,OAAO,KAAKR,cAAc,CAACS,IAAI,GAAG,MAAM,GAAG,OAAO;IAEpE,MAAM0R,WAAW,GAAG;MAClB/R,IAAI,EAAEiQ,UAAU,CAAC1B,aAAa,CAACyD,IAAI,CAAC,GAAG,CAAC;MACxClO,EAAE,EAAEmM,UAAU,CAACrB,WAAW,CAACoD,IAAI,CAAC,GAAG,CAAC;MACpChN,KAAK,KAAKiL,UAAU,CAACnC,cAAcgE,MAAM;MACzCzD,GAAG,KAAK4B,UAAU,CAAC5B,OAAOyD,MAAM;MAChC1R,OAAO,KAAK,IAAI,CAACA;KAClB;IAED,IAAIyR,aAAa,CAAClL,MAAM,GAAG,CAAC,EAAE;MAC5B,OAAO;QAAE,GAAGoL,WAAW;QAAEF,aAAa,EAAEA,aAAa,CAACG,IAAI,CAAC,GAAG;OAAG;;IAEnE,OAAOD,WAAW;;EAGpBE,qBAAqBA;IACnB,OAAOxH,MAAM,CAACyH,OAAO,CAAC,IAAI,CAACN,eAAe,EAAE,CAAC,CAC1CjH,GAAG,CAAC,CAAC,CAACnF,GAAG,EAAER,KAAK,CAAC,QAAQQ,QAAQR,SAAS,CAAC,CAC3CgN,IAAI,CAAC,EAAE,CAAC;;EAGbG,iBAAiBA,CAACC,QAAgB;IAChC,OACEA,QAAQ,KAAKC,wBAAY,CAACC,eAAe,IACzC5D,mBAAM,CAAC6D,iBAAiB,CAACH,QAAQ,CAAC;;EAItCI,MAAMA,CACJ7B,aAA4B,EAC5B8B,cAAsB,EACtBL,QAAgB,EAChB3L,UAAsB;IAEtB,IAAIiM,aAAa;IACjB,IAAIN,QAAQ,IAAI,IAAI,CAACD,iBAAiB,CAACC,QAAQ,CAAC,EAAE;MAChDM,aAAa,GAAG,CAACN,QAAQ,CAAC;;IAG5B,IAAIO,MAAc;IAClB,IAAIlM,UAAU,KAAK9G,UAAU,CAACgE,IAAI,EAAE;MAClCgP,MAAM,GAAGhC,aAAa,CAAClF,gBAAgB,CAAC,KAAK,CAAC;;IAGhD,IAAI;MAEF,IAAIgH,cAAc,IAAI,CAAC,IAAI,CAACN,iBAAiB,CAACM,cAAc,CAAC,EAAE;QAC7D,IAAIhM,UAAU,KAAK9G,UAAU,CAACgE,IAAI,EAAE;UAClC,IAAI,CAACsJ,EAAE,CAAC2F,SAAS,CAACH,cAAc,EAAEE,MAAM,EAAED,aAAa,CAAC;SACzD,MAAM;UACL,IAAI,CAACzF,EAAE,CAAC4F,WAAW,CAACJ,cAAc,EAAE9B,aAAa,EAAE+B,aAAa,CAAC;;OAEpE,MAAM;QACL,IAAIjM,UAAU,KAAK9G,UAAU,CAACgE,IAAI,EAAE;UAClC,IAAI,CAACsJ,EAAE,CAAC6F,aAAa,CAACH,MAAM,EAAED,aAAa,CAAC;SAC7C,MAAM;UACL,IAAI,CAACzF,EAAE,CAAC8F,eAAe,CAACpC,aAAa,EAAE+B,aAAa,CAAC;;;MAIzD,MAAMM,WAAW,GAAGvM,UAAU,KAAK9G,UAAU,CAACgE,IAAI,GAACkJ,gBAAgB,GAAEL,SAAS;MAC9E,IAAI,IAAI,CAACS,EAAE,CAACgG,6BAA6B,CAACD,WAAW,CAAC,EAAE;QACtD,IAAI,CAAC/F,EAAE,CAACiG,iBAAiB,EAAE;QAC3B,MAAMC,IAAI,GAAG,IAAI,CAAClG,EAAE,CAACmG,kBAAkB,EAAE,CAACC,KAAK,EAAE;QACjD,MAAMC,KAAK,GAAG,IAAI,CAACrG,EAAE,CAACmG,kBAAkB,EAAE,CAACG,KAAK,EAAE;;QAElD,OAAO;UACLC,OAAO,EAAE,IAAI;UACbL,IAAI;UACJG;SACD;OACF,MAAM;QACL,OAAO;UACLE,OAAO,EAAE,KAAK;UACdxG,IAAI,EAAE,IAAI,CAACC,EAAE,CAACwG,QAAQ;SACvB;;KAEJ,CAAC,OAAOvI,CAAC,EAAE;MACV,MAAM,IAAIxK,KAAK,8BAA8BgT,IAAI,CAACC,SAAS,CAACzI,CAAC,GAAG,CAAC;;;;;AC5FvE0I,uBAAU,CAACvN,GAAG,CAAC;;ACER,eAAewN,QAAQA,CAACjR,MAAc,EAAEF,IAAU,EAAEsK,IAAY,EAAE5M,OAAuB,EAAEqG,UAAsB,EAAEgM,cAAsB,EAAEL,QAAgB;EAChK,MAAMnF,EAAE,GAAG,IAAIS,WAAW,CAACV,IAAI,EAAE5M,OAAO,CAAC;EAIzC,MAAM0T,SAAS,GAAG7G,EAAE,CAAC2E,eAAe,EAAE;EAEtC,MAAMjJ,MAAM,GAAG,MAAMjG,IAAI,CAACS,OAAO,CAAC;IAChCC,MAAM,EAAE,aAAa;IACrB0C,MAAM,EAAE;MACN4D,IAAI,EAAE,cAAc;MACpBC,OAAO,EAAEC,aAAK,CAAC,CACbC,eAAO,CAAC,0BAA0B,CAAC,EACnCC,YAAI,gDAAgDlH,QAAQ,CAAC,EAC7DmR,eAAO,EAAE,EACTnK,aAAK,CAACa,MAAM,CAACyH,OAAO,CAAC4B,SAAS,CAAC,CAACnJ,GAAG,CAAC,CAAC,CAACnF,GAAG,EAAER,KAAK,CAAC,KAAK8E,YAAI,MAAMtE,YAAYR,OAAO,CAAC,CAAC,CAAC,CACvF;;GAEJ,CAAC;EAGF,IAAI2D,MAAM,EAAE;IACV,IAAG;MACD,MAAM;QAACzB,IAAI;QAAEM;OAAI,GAAG,MAAMhB,aAAa,CAAC9D,IAAI,EAAEvC,UAAU,CAACC,OAAO,CAAC,EAAEqG,UAAU,CAAC;MAC9E,MAAMkM,MAAM,GAAG,IAAItH,aAAa,CAACnE,IAAI,EAAEnH,MAAM,CAACC,IAAI,CAACwH,GAAG,EAAE,KAAK,CAAC,CAAC;MAC/DyF,EAAE,CAAC0E,UAAU,CAACgB,MAAM,CAAC;MAErB,OAAO1F,EAAE,CAACuF,MAAM,CAACG,MAAM,EAAEF,cAAc,EAAEL,QAAQ,EAAE3L,UAAU,CAAC;KAC/D,CAAA,OAAMyE,CAAC,EAAC;MACP5B,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE2B,CAAC,CAAC;;IAGlC,OAAO;MAAEsI,OAAO,EAAE,KAAK;MAAEL,IAAI,EAAE,KAAK;MAAEG,KAAK,EAAE;KAAO;GACrD,MAAM;IACL,MAAM3S,SAAS,CAACG,EAAE,CAACW,aAAa,CAACG,UAAU,CAAC;;AAEhD;;AC7CO,eAAeoS,oBAAoBA,CAACtR,IAAU;EACnD,MAAM;IAAC8E;GAAI,GAAG,MAAMhB,aAAa,CAAC9D,IAAI,EAAEpC,qBAAQ,CAACC,OAAO,CAAC;EAEzD,OAAOiH,GAAG;AACZ;;ACHO,eAAeyM,aAAaA,CAAC/Q,MAAc,EAAER,IAAU,EAAEwR,MAAqB,EAAEC,MAAuB;EAC5G,QAAQD,MAAM;IACZ,KAAK,KAAK;MACR,OAAOvO,gBAAgB,CAAsBjD,IAAI,EAAE,SAAS,EAAE,EAAE,CAAC;IACnE,KAAK,KAAK;MACR,MAAMiG,MAAM,GAAG,MAAMjG,IAAI,CAACS,OAAO,CAAC;QAChCC,MAAM,EAAE,aAAa;QACrB0C,MAAM,EAAE;UACN4D,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAEC,aAAK,CAAC,CACbC,eAAO,CAAC,qBAAqB,CAAC,EAC9BC,YAAI,yBAAyB5G,uCAAuCiR,SAAS,CAAC,CAC/E;;OAEJ,CAAC;MACF,IAAIxL,MAAM,EAAE;QACV,MAAM3C,mBAAmB,CAACtD,IAAI,EAAE,SAAS,EAAEyR,MAAM,CAAC;QAClD,OAAOA,MAAM;OACd,MAAM;QACL,OAAO,EAAE;;IAEb;MACE,MAAMxT,SAAS,CAACG,EAAE,CAACW,aAAa,CAACS,gBAAgB,CAAC;;AAExD;;ACtBA,MAAMqE,cAAY,GAAG,WAAW;AAEhC,AAAO,MAAM6N,SAAS,GAAG,OAAO1R,IAAU,EAAEsM,MAAc;EACxD,MAAM;IAACG,OAAO;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,MAAM;IAAE/H;GAAM,GAC/CgI,kBAAkB,CAACP,MAAM,CAAC;EAC5B,MAAM5O,OAAO,GACXgP,QAAQ,CAACpK,KAAK,KAAK,GAAG,GAClB7E,UAAU,CAACP,cAAc,CAACS,IAAI,CAAC,GAC/BF,UAAU,CAACP,cAAc,CAACY,IAAI,CAAC;EACrC,MAAMkG,IAAI,GAAG,CAAC,GAAG,EAAEyI,OAAO,CAACnK,KAAK,EAAEoK,QAAQ,CAACpK,KAAK,CAAC;EAEjD,MAAM4B,UAAU,GAAI,MAAMlE,IAAI,CAACS,OAAO,CAAC;IACrCC,MAAM,EAAE,sBAAsB;IAC9B0C,MAAM,EAAE;MACNY,IAAI,EAAEA,IAAI;MACVG,KAAK,EAAEN;;GAEV,CAAgB;EAEjB,MAAMO,gBAAgB,GAAG/G,MAAM,CAACC,IAAI,CAACuF,aAAa,CAACqB,UAAU,CAACG,UAAU,CAAC,EAAE,KAAK,CAAC;EACjF,MAAMC,eAAe,GAAGjH,MAAM,CAACC,IAAI,CAACuF,aAAa,CAACqB,UAAU,CAACK,SAAS,CAAC,EAAE,KAAK,CAAC;;;;;;EAM/E,MAAMC,IAAI,GAAG,EAAoB;;;EAIjCA,IAAI,CAACE,OAAO,GAAGR,UAAU,CAACS,KAAK;;;EAG/BH,IAAI,CAACI,OAAO,GAAGV,UAAU,CAACW,KAAK;;EAE/B,MAAM8M,YAAY,GAAGA;IACnB,IAAIC,MAAM,GAAGpN,IAAI;IACjB,CAACmI,OAAO,EAAEC,MAAM,EAAE/H,KAAK,CAAC,CAACgN,OAAO,CAAEC,IAAI;MACpC,IAAIA,IAAI,CAAChF,UAAU,EAAE;QACnB8E,MAAM,GAAGA,MAAM,CAAC3M,cAAc,CAAC0E,QAAQ,CAACmI,IAAI,CAACxP,KAAK,CAAC,CAAC;;MAEtD,IAAI,CAACwP,IAAI,CAAChF,UAAU,EAAE;QACpB8E,MAAM,GAAGA,MAAM,CAACxJ,MAAM,CAACuB,QAAQ,CAACmI,IAAI,CAACxP,KAAK,CAAC,CAAC;;KAE/C,CAAC;IACF,OAAOsP,MAAM;GACd;EAED,OAAOD,YAAY,EAAE;AACvB,CAAC;;ACnDM,eAAeI,gBAAgBA,CACpC7R,MAAc,EACdF,IAAU,EACVgS,QAAgB,EAChBC,UAAkB,EAClBC,QAAgB;EAEhB,MAAM7N,UAAU,GAAG,CAAC,MAAMqN,SAAS,CAAC1R,IAAI,EAAExC,QAAQ,CAAC,EAAE6G,UAAU,CAACzB,QAAQ,CACtE,KAAK,CACN;EACD,MAAMuP,IAAI,GAAGC,QAAQ,CAACC,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC;EAC9C,MAAMzP,GAAG,GAAGsP,QAAQ,CAACI,MAAM,CAACnO,UAAU,EAAE8N,IAAI,EAAE;IAC5CM,OAAO,EAAE,EAAE;IACXC,UAAU,EAAE;GACb,CAAC;EAEF,MAAMC,EAAE,GAAGP,QAAQ,CAACC,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,EAAE,CAAC;EAC5C,MAAMK,SAAS,GAAGR,QAAQ,CAACS,GAAG,CAACC,OAAO,CAACb,UAAU,EAAEnP,GAAG,EAAE;IAAC6P,EAAE,EAAEA;GAAG,CAAC;EACjE,MAAMI,WAAW,GAAGZ,IAAI,CAACvP,QAAQ,EAAE,GAAG+P,EAAE,CAAC/P,QAAQ,EAAE,GAAGgQ,SAAS,CAAChQ,QAAQ,EAAE;EAC1E,MAAMqD,MAAM,GAAG,MAAMhD,gBAAgB,CAACjD,IAAI,EAAE,WAAW,EAAE,EAAE,CAAC;EAC5D,MAAMgT,YAAY,GAAG;IACnB,GAAG/M,MAAM;IACT,CAAC+L,QAAQ,GAAG;MACVC,UAAU,EAAEc,WAAW;MACvBb,QAAQ,EAAEA;;GAEb;EAED,MAAM5O,mBAAmB,CAACtD,IAAI,EAAE,WAAW,EAAEgT,YAAY,CAAC;AAC5D;;ACrBO,eAAeC,iBAAiBA,CACrC/S,MAAc,EACdF,IAAU,EACV;EACE8C,GAAG;EACHkP,QAAQ;EACRhL,IAAI,GAAG;CACW;EAEpB,QAAQlE,GAAG;IACT,KAAK3F,UAAU,CAAC+V,MAAM;MACpB,OAAO,CAAC,MAAMxB,SAAS,CAAC1R,IAAI,EAAExC,QAAQ,CAAC,EAAEiI,SAAS,CAAC7C,QAAQ,CAAC,KAAK,CAAC;IACpE,KAAKzF,UAAU,CAACgW,QAAQ;MACtB,MAAMC,SAAS,GAAG,MAAMnQ,gBAAgB,CACtCjD,IAAI,EACJ,WAAW,EACX,EAAE,CACH;MACD,OAAOoT,SAAS,CAACpB,QAAQ,CAAC,CAACE,QAAQ;IACrC,KAAK/U,UAAU,CAACkW,UAAU;MACxB,MAAMC,KAAK,GAAG;QACZC,GAAG,EAAE;UACHC,MAAM,EAAE,yCAAyC;UACjDC,WAAW,0BAA0BvT;SACtC;QACDwT,OAAO,EAAE;UACPF,MAAM,EAAE,oCAAoC;UAC5CC,WAAW,EAAE;;OAEhB,CAACzM,IAAI,CAAC;MACP,MAAMf,MAAM,GAAG,MAAMjG,IAAI,CAACS,OAAO,CAAC;QAChCC,MAAM,EAAE,aAAa;QACrB0C,MAAM,EAAE;UACN4D,IAAI,EAAE,cAAc;UACpBC,OAAO,EAAEC,aAAK,CAAC,CACbC,eAAO,CAACmM,KAAK,CAACE,MAAM,CAAC,EACrBpM,YAAI,CAACkM,KAAK,CAACG,WAAW,CAAC,CACxB;;OAEJ,CAAC;MACF,IAAIxN,MAAM,EAAE;QACV,MAAMmN,SAAS,GAAG,MAAMnQ,gBAAgB,CACtCjD,IAAI,EACJ,WAAW,EACX,EAAE,CACH;QACD,MAAM+S,WAAW,GAAGK,SAAS,CAACpB,QAAQ,CAAC,CAACC,UAAU;QAClD,MAAME,IAAI,GAAGC,QAAQ,CAACuB,GAAG,CAACC,GAAG,CAACC,KAAK,CAACd,WAAW,CAAC/P,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACjE,MAAM2P,EAAE,GAAGP,QAAQ,CAACuB,GAAG,CAACC,GAAG,CAACC,KAAK,CAACd,WAAW,CAAC/P,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAChE,MAAM4P,SAAS,GAAGG,WAAW,CAAC/P,SAAS,CAAC,EAAE,CAAC;QAC3C,MAAMqB,UAAU,GAAG,CACjB,MAAMqN,SAAS,CAAC1R,IAAI,EAAExC,QAAQ,CAAC,EAC/B6G,UAAU,CAACzB,QAAQ,CAAC,KAAK,CAAC;QAC5B,MAAME,GAAG,GAAGsP,QAAQ,CAACI,MAAM,CAACnO,UAAU,EAAE8N,IAAI,EAAE;UAC5CM,OAAO,EAAE,GAAG,GAAG,EAAE;UACjBC,UAAU,EAAE;SACb,CAAC;QACF,MAAMT,UAAU,GAAGG,QAAQ,CAACS,GAAG,CAACiB,OAAO,CAAClB,SAAS,EAAE9P,GAAG,EAAE;UAAC6P,EAAE,EAAEA;SAAG,CAAC;QAEjE,OAAOV,UAAU,CAACrP,QAAQ,CAACwP,QAAQ,CAACuB,GAAG,CAACI,IAAI,CAAC;OAC9C,MAAM;QACL,MAAM9V,SAAS,CAACG,EAAE,CAACW,aAAa,CAACU,UAAU,CAAC;;IAEhD;MACE,MAAMxB,SAAS,CAACG,EAAE,CAACW,aAAa,CAACW,eAAe,CAAC;;AAEvD;;AC7EO,MAAMsU,UAAU,GAAIC,GAAW;EACpC,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,GAAG,GAAG,IAAI,CAAC;EACpC,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAACH,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;EAC3C,IAAIC,KAAK,IAAI,CAAC,IAAIG,OAAO,IAAI,CAAC,EAAE;IAC9B,OAAO,SAAS;;EAElB,UAAUH,UAAUG,UAAU;AAChC,CAAC;AAED,MAAMC,YAAY,GAAGA,CAACC,OAA4B,EAAEzR,GAAW,KAAKyR,OAAO,CAACC,IAAI,CAAE1C,IAAQ,IAAKA,IAAI,CAAC2C,IAAI,KAAK3R,GAAG,CAAC;AAEjH,MAAM4R,aAAa,GAAIH,OAAc;EACnC,MAAMI,cAAc,GAAGC,OAAO,CAAC,sBAAsB,CAAC,CAACpT,MAAM,CAAC+S,OAAO,CAAC,CAACM,QAAQ;EAC/E,MAAMC,cAAc,GAAGR,YAAY,CAACK,cAAc,EAAE,WAAW,CAAC,CAACrS,KAAK,GAAGgS,YAAY,CAACK,cAAc,EAAE,QAAQ,CAAC,CAACrS,KAAK;EACrH,OAAO;IACLyS,SAAS,EAAET,YAAY,CAACK,cAAc,EAAE,cAAc,CAAC,CAACrS,KAAK,CAAC0S,MAAM,KAAK,IAAI;IAC7EtJ,MAAM,EAAEvJ,YAAY,CAACmS,YAAY,CAACK,cAAc,EAAE,QAAQ,CAAC,CAACM,OAAO,CAAC;IACpEC,UAAU,EAAEJ,cAAc,GAAGX,IAAI,CAACC,KAAK,CAAC,IAAIe,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI,CAAC;IACpE3B,WAAW,EAAEa,YAAY,CAACK,cAAc,EAAE,aAAa,CAAC,CAACrS;GAC1D;AACH,CAAC;AAED,AAAO,MAAM+S,sBAAsB,GAAId,OAAe;EACpD,MAAMe,gBAAgB,GAAGZ,aAAa,CAACH,OAAO,CAAC;EAC/C,OAAO;IACL7W,OAAO,0BAA0B4X,gBAAgB,CAACP,SAAS,GAAG,SAAS,GAAG,WAAW;IACrF/N,IAAI,EAAE,MAAM;IACZ0E,MAAM,EAAE4J,gBAAgB,CAAC5J,MAAM,GAAG,OAAO;IACzC6J,UAAU,EAAEvB,UAAU,CAACsB,gBAAgB,CAACJ,UAAU,CAAC;IACnDzB,WAAW,EAAE6B,gBAAgB,CAAC7B;GAC/B;AACH,CAAC;;AC1BM,eAAe+B,aAAaA,CACjCtV,MAAc,EACdF,IAAU,EACVuU,OAAe;EAEf,MAAMkB,cAAc,GAAGJ,sBAAsB,CAACd,OAAO,CAAC;EACtD,MAAMtO,MAAM,GAAG,MAAMjG,IAAI,CAACS,OAAO,CAAC;IAChCC,MAAM,EAAE,aAAa;IACrB0C,MAAM,EAAE;MACN4D,IAAI,EAAE,cAAc;MACpBC,OAAO,EAAEC,aAAK,CAAC,CACbC,eAAO,CAAC,4BAA4B,CAAC,EACrCC,YAAI,gDAAgDlH,QAAQ,CAAC,EAC7DmR,eAAO,EAAE,EACTnK,aAAK,CAACa,MAAM,CAACyH,OAAO,CAACiG,cAAc,CAAC,CAACxN,GAAG,CAAC,CAAC,CAACnF,GAAG,EAAER,KAAK,CAAC,KAAK8E,YAAI,MAAMtE,YAAYR,OAAO,CAAC,CAAC,CAAC,CAC5F;;GAEJ,CAAC;EAEF,IAAI2D,MAAM,EAAE;IACV,MAAM5B,UAAU,GAAG,CAAC,MAAMqN,SAAS,CAAC1R,IAAI,EAAExC,QAAQ,CAAC,EAAE6G,UAAU;IAC/D,MAAM2F,SAAS,GAAG0L,cAAc,CAC7B9L,IAAI,CAAC2K,OAAO,EAAElQ,UAAU,EAAE,IAAI,CAAC,CAC/BzB,QAAQ,CAAC,KAAK,CAAC;IAClB,OAAOoH,SAAS;GACjB,MAAM;IACL,MAAM/L,SAAS,CAACG,EAAE,CAACW,aAAa,CAACG,UAAU,CAAC;;AAEhD;;ACzBO,eAAeyW,gBAAgBA,CACpCnV,MAAc,EACdR,IAAU,EACVtC,OAAgB;EAEhB,MAAMqJ,WAAW,GAAGrJ,OAAO,IAAIE,qBAAQ,CAACC,OAAO,GAAG,SAAS,GAAG,SAAS;EAEvE,MAAMoI,MAAM,GAAG,MAAMjG,IAAI,CAACS,OAAO,CAAC;IAChCC,MAAM,EAAE,aAAa;IACrB0C,MAAM,EAAE;MACN4D,IAAI,EAAE,cAAc;MACpBC,OAAO,EAAEC,aAAK,CAAC,CACbC,eAAO,CAAC,+BAA+B,CAAC,EACxCC,YAAI,yBACsB5G,4BAA4BuG,wBAAwB,CAC7E,CACF;;GAEJ,CAAC;EAEF,IAAId,MAAM,EAAE;IACV,MAAM;MAAEzB;KAAM,GAAG,MAAMV,aAAa,CAAC9D,IAAI,EAAEtC,OAAO,EAAET,UAAU,CAAC4D,KAAK,CAAC;IAErE,MAAM4E,SAAS,GAAGjB,IAAI,CAACiB,SAAS,CAAC7C,QAAQ,CAAC,KAAK,CAAC;IAChDgE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEpB,SAAS,EAAEjB,IAAI,CAACH,UAAU,CAACzB,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC7EgE,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE3B,eAAe,CAACV,IAAI,CAACH,UAAU,CAACzB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAElF,OAAO4C,UAAU,CAAC9H,OAAO,EAAE+H,SAAS,CAAC;GACtC,MAAM;IACL,MAAMxH,SAAS,CAACG,EAAE,CAACW,aAAa,CAACE,SAAS,CAAC;;AAE/C;;ACzBA;AACA2W,UAAU,CAACvY,MAAM,gBAAGuX,OAAO,CAAC,SAAS,CAAC,CAACvX,MAAM;AAS7C,MAAawY,YAAY,GAAO,OAAO;EAACrV,MAAM;EAAEC;CAAoB;EAClE,MAAMF,eAAe,CAACP,IAAI,EAAEQ,MAAM,EAAEC,OAAO,CAAC;EAE5C,QAAQA,OAAO,CAACC,MAAM;IACpB,KAAK,0BAA0B;MAC7B,OAAOoG,oBAAoB,CACzBtG,MAAM,EACNR,IAAI,EACJS,OAAO,CAAC2C,MAAM,CAACW,UAAU,EACzBtG,UAAU,CAACgD,OAAO,CAAC2C,MAAM,CAAC1F,OAAO,CAAC,CACnC;IACH,KAAK,gBAAgB;MACnB,OAAOiY,gBAAgB,CACrBnV,MAAM,EACNR,IAAI,EACJvC,UAAU,CAACgD,OAAO,CAAC2C,MAAM,CAAC1F,OAAO,CAAC,CACnC;IACH,KAAK,iBAAiB;MACpB,OAAO+J,WAAW,CAACjH,MAAM,EAAER,IAAI,CAAC;IAClC,KAAK,cAAc;MACjB,MAAMsK,IAAI,GAAG7J,OAAO,CAAC2C,MAAM,CAACkH,IAAI;MAChC,OAAO6G,QAAQ,CACb3Q,MAAM,EACNR,IAAI,EACJsK,IAAI,EACJ7J,OAAO,CAAC2C,MAAM,CAAC1F,OAAO,EACtB+C,OAAO,CAAC2C,MAAM,CAACW,UAAU,EACzBtD,OAAO,CAAC2C,MAAM,CAAC2M,cAAc,EAC7BtP,OAAO,CAAC2C,MAAM,CAACsM,QAAQ,CACxB;IACH,KAAK,0BAA0B;MAC7B,OAAO4B,oBAAoB,CAACtR,IAAI,CAAC;IACnC,KAAK,aAAa;MAChB,OAAOuR,aAAa,CAClB/Q,MAAM,EACNR,IAAI,EACJS,OAAO,CAAC2C,MAAM,CAACoO,MAAM,EACrB/Q,OAAO,CAAC2C,MAAM,CAAC1F,OAAO,CACvB;IACH,KAAK,sBAAsB;MACzB,OAAOqU,gBAAgB,CACrBvR,MAAM,EACNR,IAAI,EACJS,OAAO,CAAC2C,MAAM,CAAC4O,QAAQ,EACvBvR,OAAO,CAAC2C,MAAM,CAAC6O,UAAU,EACzBxR,OAAO,CAAC2C,MAAM,CAAC8O,QAAQ,CACxB;IACH,KAAK,uBAAuB;MAC1B,OAAOe,iBAAiB,CAACzS,MAAM,EAAER,IAAI,EAAE;QACrC8C,GAAG,EAAErC,OAAO,CAAC2C,MAAM,CAACN,GAAG;QACvB,IAAIrC,OAAO,CAAC2C,MAAM,CAAC4O,QAAQ,IAAI;UAACA,QAAQ,EAAEvR,OAAO,CAAC2C,MAAM,CAAC4O;SAAS,CAAC;QACnE,IAAIvR,OAAO,CAAC2C,MAAM,CAAC4D,IAAI,IAAI;UAACA,IAAI,EAAEvG,OAAO,CAAC2C,MAAM,CAAC4D;SAAK;OACvD,CAAC;IACJ,KAAK,mBAAmB;MACtB,OAAOwO,aAAa,CAAChV,MAAM,EAAER,IAAI,EAAES,OAAO,CAAC2C,MAAM,CAACmR,OAAO,CAAC;IAC5D;MACE,MAAMtW,SAAS,CAACG,EAAE,CAACW,aAAa,CAACQ,gBAAgB,CAAC;;AAExD,CAAC;;;;"}