(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{518:function(t,_,s){"use strict";s.r(_);var v=s(6),e=Object(v.a)({},(function(){var t=this,_=t.$createElement,s=t._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"项目文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#项目文档"}},[t._v("#")]),t._v(" 项目文档")]),t._v(" "),s("h4",{attrs:{id:"_1-初始化项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-初始化项目"}},[t._v("#")]),t._v(" 1. 初始化项目")]),t._v(" "),s("p",[t._v("npx create-react-app jira --template typescript")]),t._v(" "),s("h4",{attrs:{id:"_2-文件说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-文件说明"}},[t._v("#")]),t._v(" 2.文件说明")]),t._v(" "),s("p",[t._v("src>react-app-env.d.ts   为我们引入一些预先定义好的typescript的类名？")]),t._v(" "),s("p",[t._v("src>reportWebVitals.ts   做埋点上报")]),t._v(" "),s("p",[t._v("src>setupTests.ts\t\t\t 配置单元测试")]),t._v(" "),s("p",[t._v("public>manifest.json      用于做pwa   配置pwa加载情况")]),t._v(" "),s("p",[t._v("public>robots.txt             用于配置   搜索引擎爬虫怎么对待我们的页面")]),t._v(" "),s("h4",{attrs:{id:"_3-项目工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-项目工具"}},[t._v("#")]),t._v(" 3.项目工具")]),t._v(" "),s("p",[t._v("3.1 prettier")]),t._v(" "),s("h4",{attrs:{id:"_4-mock方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-mock方案"}},[t._v("#")]),t._v(" 4. mock方案")]),t._v(" "),s("ol",[s("li",[t._v("代码入侵（直接写死mock数据  或者请求本地的JSON文件）")]),t._v(" "),s("li",[t._v("请求拦截  （代表Mock.js） 优： 代码分离  可生成随机数   缺：无法真实模拟增删改查  只支持ajax 不支持fetch")]),t._v(" "),s("li",[t._v("接口管理工具   （rap   swagger  moco   yapi） 优： 配置功能强大  接口管理与mock一体 后端修改接口 Mcok也跟着更改  可靠     缺：配置复杂   依赖后端    大团队使用较多 人少慎重考虑")]),t._v(" "),s("li",[t._v("本地 node服务器  json-server  优： 配置简单   可自定义   增删改查真实模拟   缺： 无法随着后端api的修改而自动修改")])]),t._v(" "),s("h4",{attrs:{id:"_5-rest-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-rest-api"}},[t._v("#")]),t._v(" 5. REST API")]),t._v(" "),s("p",[t._v("URI代表资源/对象  METHOD代表行为")]),t._v(" "),s("p",[t._v("GET /tickets    //列表")]),t._v(" "),s("p",[t._v("GET /tickets/12  // 详情")]),t._v(" "),s("p",[t._v("POST /tickets   // 增加")]),t._v(" "),s("p",[t._v("PUT /tickets/12   // 替换")]),t._v(" "),s("p",[t._v("PATCH /tickets/12   // 修改")]),t._v(" "),s("p",[t._v("DELETE  /tickets/12  //删除")]),t._v(" "),s("h4",{attrs:{id:"_6-json-server"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-json-server"}},[t._v("#")]),t._v(" 6. json-server")]),t._v(" "),s("p",[t._v("yarn add -D json-server")]),t._v(" "),s("p",[t._v("再package.json中配置  json-server --watch --port 53000  __ json_server_mock__/db.json")]),t._v(" "),s("h4",{attrs:{id:"_7-hooks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-hooks"}},[t._v("#")]),t._v(" 7.hooks")]),t._v(" "),s("h4",{attrs:{id:"_8-ts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-ts"}},[t._v("#")]),t._v(" 8.ts")]),t._v(" "),s("p",[t._v("TypeScript 的8种类型： number  string boolean  函数  array any void object")]),t._v(" "),s("ol",[s("li",[t._v("number 数字类型  包含小数  其它进制的数字")]),t._v(" "),s("li",[t._v("string  字符串")]),t._v(" "),s("li",[t._v("array  在ts中  array一般指  所有元素类型相通的值的集合")]),t._v(" "),s("li",[t._v("在TS中类型不同的数组  叫做  tuple")]),t._v(" "),s("li",[t._v("boolean  布尔值")]),t._v(" "),s("li",[t._v("函数  1.js函数上直接声明参数和返回值  2.直接声明你想要的函数类型")]),t._v(" "),s("li",[t._v("any  表示这个值可以是任何值  被定义为any就意味着不做任何类型检查")]),t._v(" "),s("li",[t._v("void 绝大部分情况下  只会用在这一个地方 ： 表示函数不反回任何值或者返回undefined")]),t._v(" "),s("li",[t._v("object 除了number string  boolean  bigint  symbol null undefined 其它都是object")]),t._v(" "),s("li",[t._v("tuple  数量固定  类型可以各异")]),t._v(" "),s("li",[t._v("enum")]),t._v(" "),s("li",[t._v("null 和 undefined  是值 也是类型")]),t._v(" "),s("li",[t._v("unknown  表示这个值可以是任何值   是严格版的any   不能复制给任何类型  也不能读取任何属性")]),t._v(" "),s("li",[t._v("never    const func = ()=>{ throw new Error() }")]),t._v(" "),s("li",[t._v("interface 不是一种类型   应该被翻译成接口 或者说使用上面介绍的类型  创建一个我们自己的类型")]),t._v(" "),s("li",[t._v("啥时候声明类型？")]),t._v(" "),s("li",[t._v("理论上来说 我们声明任何变量的时候都需要声明类型（包括普通变量 函数 组件 hook等等），声明函数 组件  hook等需要声明参数  和 返回值类型  但是很多情况下  ts可以帮我们自动推断  我们不用声明")]),t._v(" "),s("li",[t._v(".d.ts    js文件+.d.ts文件   ===  ts文件        .d.ts文件可以让js文件继续维持自己js文件的身份，而拥有TS的类型保护   一般我们写业务代码不会用到   但是点击类型跳转一般会跳到d.ts文件")])]),t._v(" "),s("h4",{attrs:{id:"ts-utility-types"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ts-utility-types"}},[t._v("#")]),t._v(" ts Utility Types")]),t._v(" "),s("ol",[s("li",[t._v("联合类型")])]),t._v(" "),s("p",[t._v("let num : string | number")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("类型别名    类型别名在很多情况下可以和 interface 互换")])]),t._v(" "),s("p",[t._v("type FavoriteNumber = string|number")]),t._v(" "),s("p",[t._v("区别：  定义联合类型   交叉类型    使用type       interfaca没法实现Utility Type")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[t._v("utility type 的用法    :  用泛型给它传入一个其它类型  然后 utility  Type  会对该类型进行操作")])]),t._v(" "),s("p",[t._v("Parameter"),s("typeof",{attrs:{xx:""}},[t._v(" => 提取xx属性")])],1),t._v(" "),s("p",[t._v("Partial"),s("Person",[t._v(" = {}  =>  让必须的属性 变成可有可无")])],1),t._v(" "),s("p",[t._v("Omit<Person,'name'|‘age’> = {}   => 删除指定类型的指定属性")])])}),[],!1,null,null,null);_.default=e.exports}}]);